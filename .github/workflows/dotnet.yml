name: .NET MVC CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # -------------------------
  # Code Quality & Security
  # -------------------------
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release --verbosity normal

      - name: Run security audit
        run: dotnet list package --vulnerable --include-transitive

      - name: Run code analysis
        run: dotnet build --configuration Release --verbosity normal /p:RunAnalyzersDuringBuild=true

  # -------------------------
  # Test Suite
  # -------------------------
  test:
    name: Run Tests
    runs-on: windows-latest
    needs: code-quality

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release --verbosity normal

      - name: Run unit tests
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ runner.os }}
          path: ./TestResults

  # -------------------------
  # Build & Package
  # -------------------------
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release --verbosity normal

      - name: Publish application (Windows self-contained)
        run: dotnet publish -c Release -o ./publish -r win-x86 --self-contained true

      - name: Create deployment package
        run: zip -r online-event-booking-system-${{ github.sha }}.zip ./publish/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: online-event-booking-system-${{ github.sha }}.zip
          retention-days: 30

  # -------------------------
  # Deploy to Production
  # -------------------------
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Azure Production
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.AZURE_PROD_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_PROD_PUBLISH_PROFILE }}
          package: online-event-booking-system-${{ github.sha }}.zip

      - name: Notify deployment success
        if: success()
        run: echo "âœ… Production deployment completed successfully!"

  # -------------------------
  # Cleanup
  # -------------------------
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Cleanup old artifacts
        run: echo "Cleaning up old artifacts..."
