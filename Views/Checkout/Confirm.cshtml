@model online_event_booking_system.Data.Entities.Booking
@{
    ViewData["Title"] = "Booking Confirmation - Star Events";
}

<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
    <!-- Success Header with Animation -->
    <div class="relative overflow-hidden">
        <div class="absolute inset-0 bg-gradient-to-r from-green-400 via-blue-500 to-purple-600 opacity-10"></div>
        <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
            <div class="text-center">
                <!-- Animated Success Icon -->
                <div class="mx-auto flex items-center justify-center h-24 w-24 rounded-full bg-gradient-to-r from-green-400 to-blue-500 mb-6 shadow-2xl animate-bounce">
                    <svg class="h-12 w-12 text-white animate-pulse" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                    </svg>
                </div>
                
                <!-- Main Title with Gradient -->
                <h1 class="text-5xl md:text-6xl font-bold bg-gradient-to-r from-gray-800 via-blue-600 to-purple-600 bg-clip-text text-transparent mb-4 animate-fade-in">
                    Booking Confirmed!
                </h1>
                
                <!-- Subtitle -->
                <p class="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed animate-fade-in-delay">
                    🎉 Your tickets are ready! Check your email for confirmation details and QR codes.
                </p>
                
                <!-- Celebration Elements -->
                <div class="flex justify-center space-x-2 mt-8 animate-fade-in-delay-2">
                    <div class="w-3 h-3 bg-yellow-400 rounded-full animate-ping"></div>
                    <div class="w-3 h-3 bg-blue-400 rounded-full animate-ping" style="animation-delay: 0.2s;"></div>
                    <div class="w-3 h-3 bg-green-400 rounded-full animate-ping" style="animation-delay: 0.4s;"></div>
                    <div class="w-3 h-3 bg-purple-400 rounded-full animate-ping" style="animation-delay: 0.6s;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Main Content -->
            <div class="lg:col-span-2 space-y-6">
                <!-- Event Card - Dark Theme -->
                <div class="bg-gradient-to-br from-slate-800 to-slate-900 shadow-2xl rounded-2xl border border-slate-700 overflow-hidden backdrop-blur-sm">
                    <div class="p-8">
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <h2 class="text-3xl font-bold text-white mb-4 bg-gradient-to-r from-white to-slate-300 bg-clip-text text-transparent">
                                    @Model.Event.Title
                                </h2>
                                
                                <!-- Date & Time -->
                                <div class="flex items-center text-slate-300 mb-4 bg-slate-800/50 rounded-xl p-3 backdrop-blur-sm">
                                    <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center mr-4">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="font-semibold text-white">@Model.Event.EventDate.ToString("MMMM dd, yyyy")</div>
                                        <div class="text-sm text-slate-400">@Model.Event.EventTime.ToString("h:mm tt") - @Model.Event.EventTime.AddHours(4).ToString("h:mm tt")</div>
                                    </div>
                                </div>
                                
                                <!-- Location -->
                                <div class="flex items-center text-slate-300 bg-slate-800/50 rounded-xl p-3 backdrop-blur-sm">
                                    <div class="w-10 h-10 bg-gradient-to-br from-teal-500 to-teal-600 rounded-xl flex items-center justify-center mr-4">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        </svg>
                                    </div>
                                    <div>
                                        <div class="font-semibold text-white">@(Model.Event.Venue?.Name ?? "Venue not specified")</div>
                                        <div class="text-sm text-slate-400">@(Model.Event.Venue?.Location ?? "Location not specified")</div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Status Badge -->
                            <div class="ml-6">
                                <span class="inline-flex items-center px-4 py-2 rounded-full text-sm font-bold @(Model.Status == "Confirmed" ? "bg-gradient-to-r from-green-500 to-green-600 text-white shadow-lg" : "bg-gradient-to-r from-yellow-500 to-yellow-600 text-white shadow-lg")">
                                    @if (Model.Status == "Confirmed")
                                    {
                                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                    }
                                    @Model.Status
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tickets Section - Dark Theme -->
                <div class="bg-gradient-to-br from-slate-800 to-slate-900 shadow-2xl rounded-2xl border border-slate-700 backdrop-blur-sm">
                    <div class="px-8 py-6 border-b border-slate-700">
                        <h3 class="text-2xl font-bold text-white bg-gradient-to-r from-white to-slate-300 bg-clip-text text-transparent">
                            Your Tickets (@(Model.Tickets?.Count ?? 0))
                        </h3>
                    </div>
                    <div class="p-8">
                        @if (Model.Tickets != null && Model.Tickets.Any())
                        {
                            <div class="space-y-6">
                    @foreach (var ticket in Model.Tickets)
                    {
                                    <div class="bg-slate-800/50 border border-slate-600 rounded-2xl p-6 hover:bg-slate-700/50 transition-all duration-300 backdrop-blur-sm">
                                        <div class="flex items-start gap-4">
                                            <div class="flex-shrink-0">
                                                @if (!string.IsNullOrEmpty(ticket.QRCode) && Model.Status == "Confirmed")
                                                {
                                                    <!-- QR Code from S3 - direct URL -->
                                                    <div class="relative">
                                                        @{
                                                            // Get QR code URL directly from the backend
                                                            var qrCodeUrl = ViewBag.QRCodeUrls != null && ViewBag.QRCodeUrls.ContainsKey(ticket.Id) 
                                                                ? ViewBag.QRCodeUrls[ticket.Id] 
                                                                : ticket.QRCode; // Fallback to direct path
                                                        }
                                                        <img src="@qrCodeUrl" alt="QR Code" class="w-36 h-36 rounded-xl border-2 border-slate-600 shadow-2xl bg-white p-2" />
                                                        <a href="@qrCodeUrl" download="@($"ticket-{ticket.TicketNumber}.png")" 
                                                           class="absolute -bottom-2 -right-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white p-3 rounded-full shadow-xl hover:from-blue-600 hover:to-blue-700 transition-all transform hover:scale-110"
                                                           title="Download QR Code">
                                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                            </svg>
                                                        </a>
                                                    </div>
                                                }
                                                else if (Model.Status == "Confirmed")
                                                {
                                                    <div class="w-36 h-36 bg-gradient-to-br from-yellow-500/20 to-orange-500/20 rounded-xl flex items-center justify-center border-2 border-yellow-500/30 backdrop-blur-sm">
                                                        <div class="text-center">
                                                            <svg class="w-10 h-10 text-yellow-400 mx-auto mb-3 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                            </svg>
                                                            <p class="text-sm text-yellow-300 font-medium">QR Code<br/>Generating...</p>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="w-36 h-36 bg-gradient-to-br from-slate-700/50 to-slate-800/50 rounded-xl flex items-center justify-center border-2 border-slate-600 backdrop-blur-sm">
                                                        <div class="text-center">
                                                            <svg class="w-10 h-10 text-slate-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                            </svg>
                                                            <p class="text-sm text-slate-400 font-medium">QR Code<br/>After Payment</p>
                                                        </div>
                                                    </div>
                                                }
                                            </div>

                                            <div class="flex-1">
                                                <div class="flex items-center justify-between mb-3">
                                                    <h4 class="text-xl font-bold text-white">@(ticket.EventPrice?.Category ?? "General Admission")</h4>
                                                    <span class="text-2xl font-bold bg-gradient-to-r from-green-400 to-green-500 bg-clip-text text-transparent">
                                                        LKR @(ticket.EventPrice?.Price.ToString("F2") ?? "0.00")
                                                    </span>
                                                </div>
                                                <p class="text-slate-300 mb-4">@(ticket.EventPrice?.Description ?? "Standard ticket")</p>
                                                <div class="flex items-center space-x-4 text-sm">
                                                    <span class="text-slate-400">Ticket #@ticket.TicketNumber</span>
                                                    <span class="text-slate-600">•</span>
                                                    <span class="text-slate-400">Qty: 1</span>
                                                    <span class="text-slate-600">•</span>
                                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-bold @(Model.Status == "Confirmed" ? "bg-gradient-to-r from-green-500 to-green-600 text-white" : "bg-gradient-to-r from-yellow-500 to-yellow-600 text-white")">
                                                        @(Model.Status == "Confirmed" ? "Paid" : "Pending")
                                                    </span>
                                                </div>
                                            </div>
                                </div>
                                </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                                </svg>
                                <h3 class="mt-2 text-sm font-medium text-gray-900">No tickets found</h3>
                                <p class="mt-1 text-sm text-gray-500">There was an issue loading your tickets.</p>
                                <div class="mt-6">
                                    <button onclick="window.location.reload()" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                                        Refresh Page
                                    </button>
                                </div>
                            </div>
                        }
                        </div>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="space-y-6">
                <!-- Booking Summary - Dark Theme -->
                <div class="bg-gradient-to-br from-slate-800 to-slate-900 shadow-2xl rounded-2xl border border-slate-700 backdrop-blur-sm">
                    <div class="px-8 py-6 border-b border-slate-700">
                        <h3 class="text-2xl font-bold text-white bg-gradient-to-r from-white to-slate-300 bg-clip-text text-transparent">
                            Booking Summary
                        </h3>
                    </div>
                    <div class="p-8 space-y-6">
                        <div class="flex justify-between items-center">
                            <span class="text-slate-400 font-medium">Booking ID</span>
                            <div class="flex items-center gap-3">
                                <span id="bookingIdText" class="text-white font-bold">@Model.Id.ToString().Substring(0, 8).ToUpper()</span>
                                <button id="copyBookingId" class="text-xs px-3 py-1 bg-slate-700 text-slate-300 rounded-lg hover:bg-slate-600 transition-colors">Copy</button>
                            </div>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-slate-400 font-medium">Booking Date</span>
                            <span class="text-white font-semibold">@Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-slate-400 font-medium">Total Amount</span>
                            <span class="text-2xl font-bold bg-gradient-to-r from-green-400 to-green-500 bg-clip-text text-transparent">
                                LKR @Model.Tickets.Sum(t => t.EventPrice?.Price ?? 0).ToString("F2")
                            </span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-slate-400 font-medium">Payment Status</span>
                            <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-bold @(Model.Status == "Confirmed" ? "bg-gradient-to-r from-green-500 to-green-600 text-white" : "bg-gradient-to-r from-yellow-500 to-yellow-600 text-white")">
                                @(Model.Status == "Confirmed" ? "Paid" : "Pending")
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Important Information - Dark Theme -->
                <div class="bg-gradient-to-br from-blue-900/20 to-indigo-900/20 border border-blue-500/30 rounded-2xl p-6 backdrop-blur-sm">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                                <svg class="h-6 w-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-4">
                            <h3 class="text-lg font-bold text-white mb-4">Important Information</h3>
                            <div class="text-slate-300">
                                <ul class="space-y-3">
                                    <li class="flex items-start">
                                        <svg class="w-5 h-5 text-blue-400 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <span>Bring a valid ID to the event</span>
                                    </li>
                                    <li class="flex items-start">
                                        <svg class="w-5 h-5 text-blue-400 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <span>Arrive 15 minutes before start time</span>
                                    </li>
                                    <li class="flex items-start">
                                        <svg class="w-5 h-5 text-blue-400 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <span>Show QR code at entrance</span>
                                    </li>
                                    <li class="flex items-start">
                                        <svg class="w-5 h-5 text-blue-400 mt-0.5 mr-3 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                        <span>No refunds after event starts</span>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="space-y-4">
                    <button onclick="window.print()" class="w-full inline-flex justify-center items-center px-6 py-3 border border-slate-600 shadow-lg text-sm font-bold rounded-xl text-slate-300 bg-slate-800/50 hover:bg-slate-700/50 transition-all duration-300 backdrop-blur-sm">
                        <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                        </svg>
                        Print Tickets
                    </button>
                    <a href="/events" class="w-full inline-flex justify-center items-center px-6 py-3 border border-transparent shadow-xl text-sm font-bold rounded-xl text-white bg-gradient-to-r from-purple-500 to-teal-500 hover:from-purple-600 hover:to-teal-600 transition-all duration-300 transform hover:scale-105">
                        <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
                        </svg>
                        Browse More Events
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

    <style>
        
        .animate-fade-in {
            animation: fadeIn 0.8s ease-out;
        }
        
        .animate-fade-in-delay {
            animation: fadeInDelay 0.8s ease-out 0.3s both;
        }
        
        .animate-fade-in-delay-2 {
            animation: fadeInDelay2 0.8s ease-out 0.6s both;
        }
        
        .backdrop-blur-sm {
            backdrop-filter: blur(4px);
        }
        
        .bg-clip-text {
            -webkit-background-clip: text;
            background-clip: text;
        }
    </style>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add entrance animations to cards
        const cards = document.querySelectorAll('.bg-gradient-to-br');
        cards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(30px)';
            setTimeout(() => {
                card.style.transition = 'all 0.6s ease-out';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 200);
        });

        // Copy booking id to clipboard with enhanced feedback
        const copyBtn = document.getElementById('copyBookingId');
        if (copyBtn) {
            copyBtn.addEventListener('click', function () {
                const bookingEl = document.getElementById('bookingIdText');
                if (!bookingEl) return;
                const text = bookingEl.textContent.trim();
                
                navigator.clipboard?.writeText(text).then(function() {
                    // Enhanced visual feedback
                    copyBtn.innerHTML = '<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>Copied!';
                    copyBtn.classList.add('bg-green-600', 'text-white');
                    copyBtn.classList.remove('bg-slate-700', 'text-slate-300');
                    
                    setTimeout(() => {
                        copyBtn.innerHTML = 'Copy';
                        copyBtn.classList.remove('bg-green-600', 'text-white');
                        copyBtn.classList.add('bg-slate-700', 'text-slate-300');
                    }, 2000);
                }).catch(function() {
                    // fallback
                    alert('Press Ctrl+C to copy: ' + text);
                });
            });
        }

        // Add hover effects to QR codes
        const qrCodes = document.querySelectorAll('img[alt="QR Code"]');
        qrCodes.forEach(qr => {
            qr.addEventListener('mouseenter', function() {
                this.style.transform = 'scale(1.05)';
                this.style.transition = 'transform 0.3s ease';
            });
            
            qr.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1)';
            });
        });

        // Add success celebration effect
        setTimeout(() => {
            const successIcon = document.querySelector('.animate-bounce');
            if (successIcon) {
                successIcon.style.animation = 'none';
                setTimeout(() => {
                    successIcon.style.animation = 'bounce 1s ease-in-out';
                }, 100);
            }
        }, 1000);
    });
    </script>