@model IEnumerable<online_event_booking_system.Data.Entities.Event>
@{
    ViewData["Title"] = "My Events";
    Layout = "_DashboardLayout";
}

<!-- Organizer Events Container -->
<div class="min-h-screen bg-dark-navy text-white pt-20">
    <!-- Main Content -->
    <div class="p-4 md:p-6 pt-8">
            <!-- Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-2xl">
                    <div class="flex items-center space-x-3">
                        <svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <p class="text-green-400 font-medium">@TempData["SuccessMessage"]</p>
                    </div>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-2xl">
                    <div class="flex items-center space-x-3">
                        <svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                        <p class="text-red-400 font-medium">@TempData["ErrorMessage"]</p>
                    </div>
                </div>
            }

            <!-- Page Header -->
            <div class="mb-8">
                <div class="flex flex-col md:flex-row items-start md:items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">My Events</h1>
                        <p class="text-gray-400">Manage and track all your events in one place</p>
                    </div>
                    <div class="mt-4 md:mt-0 flex space-x-3">
                        <button class="bg-white/10 border border-white/20 text-white px-4 py-2 rounded-xl hover:bg-white/20 transition-all duration-200 flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            <span>Export</span>
                        </button>
                        <a asp-controller="Organizer" asp-action="CreateEvent" class="bg-gradient-to-r from-purple-500 to-teal-500 text-white px-6 py-2 rounded-xl font-bold hover:from-purple-600 hover:to-teal-600 transition-all transform hover:scale-105 shadow-lg flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            <span>Create Event</span>
                        </a>
                    </div>
                </div>
            </div>

            <!-- Filters and Search -->
            <section aria-label="Filters" class="mb-8">
                <div class="flex flex-col lg:flex-row items-center justify-between space-y-4 lg:space-y-0 lg:space-x-4">
                    <div class="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 w-full lg:w-auto">
                        <div class="relative w-full sm:w-80">
                            <input type="text" 
                                   placeholder="Search events..." 
                                   class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm">
                            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <select aria-label="Status filter" class="px-4 py-3 bg-dark-navy border border-white/20 rounded-2xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm w-full sm:w-48 cursor-pointer">
                            <option class="bg-dark-navy text-foreground">All Status</option>
                            <option class="bg-dark-navy text-foreground">Draft</option>
                            <option class="bg-dark-navy text-foreground">Published</option>
                            <option class="bg-dark-navy text-foreground">Live</option>
                            <option class="bg-dark-navy text-foreground">Completed</option>
                            <option class="bg-dark-navy text-foreground">Cancelled</option>
                        </select>
                        <select aria-label="Date filter" class="px-4 py-3 bg-dark-navy border border-white/20 rounded-2xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm w-full sm:w-48 cursor-pointer">
                            <option class="bg-dark-navy text-foreground">All Dates</option>
                            <option class="bg-dark-navy text-foreground">This Week</option>
                            <option class="bg-dark-navy text-foreground">This Month</option>
                            <option class="bg-dark-navy text-foreground">Next Month</option>
                            <option class="bg-dark-navy text-foreground">Past Events</option>
                        </select>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button id="gridViewBtn" class="p-3 bg-white/10 border border-white/20 rounded-xl hover:bg-white/20 transition-all duration-200" title="Grid View">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                            </svg>
                        </button>
                        <button id="tableViewBtn" class="p-3 bg-gradient-to-r from-purple-500 to-teal-500 rounded-xl" title="Table View">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </section>


            <!-- Events Table -->
            <section aria-label="Events Table" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="w-full min-w-[800px]">
                        <thead class="bg-white/10">
                            <tr>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white">Event</th>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white hidden sm:table-cell">Date & Time</th>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white hidden md:table-cell">Venue</th>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white">Status</th>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white hidden lg:table-cell">Tickets Sold</th>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white hidden lg:table-cell">Revenue</th>
                                <th class="px-3 md:px-6 py-4 text-left text-sm font-semibold text-white">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-white/10">
                            @if (Model != null && Model.Any())
                            {
                                @foreach (var eventItem in Model)
                                {
                                    var status = eventItem.Status ?? (eventItem.IsPublished ? "Published" : "Draft");
                                    var statusColor = status switch
                                    {
                                        "Published" => "bg-green-500/20 text-green-400",
                                        "Draft" => "bg-yellow-500/20 text-yellow-400",
                                        "Cancelled" => "bg-red-500/20 text-red-400",
                                        "Completed" => "bg-blue-500/20 text-blue-400",
                                        _ => "bg-gray-500/20 text-gray-400"
                                    };
                                    var minPrice = eventItem.Prices?.Min(p => p.Price) ?? 0;
                                    var totalBookings = eventItem.Bookings?.Count ?? 0;
                                    
                                    <tr class="hover:bg-white/5 transition-all duration-200">
                                        <td class="px-3 md:px-6 py-4">
                                            <div>
                                                <div class="text-white font-semibold">@eventItem.Title</div>
                                                <div class="text-gray-400 text-sm">@eventItem.Category?.Name • LKR @minPrice.ToString("F2")</div>
                                                <div class="text-gray-400 text-xs sm:hidden">@eventItem.EventDate.ToString("MMM dd, yyyy") @eventItem.EventTime.ToString("h:mm tt")</div>
                                            </div>
                                        </td>
                                        <td class="px-3 md:px-6 py-4 hidden sm:table-cell">
                                            <div class="text-white">@eventItem.EventDate.ToString("MMM dd, yyyy")</div>
                                            <div class="text-gray-400 text-sm">@eventItem.EventTime.ToString("h:mm tt")</div>
                                        </td>
                                        <td class="px-3 md:px-6 py-4 text-white hidden md:table-cell">@eventItem.Venue?.Name</td>
                                        <td class="px-3 md:px-6 py-4">
                                            <span class="px-3 py-1 rounded-full text-xs font-medium @statusColor">@status</span>
                                        </td>
                                        <td class="px-3 md:px-6 py-4 hidden lg:table-cell">
                                            <div class="text-white">@totalBookings</div>
                                            <div class="text-gray-400 text-sm">of @eventItem.TotalCapacity</div>
                                        </td>
                                        <td class="px-3 md:px-6 py-4 text-white font-semibold hidden lg:table-cell">LKR @((totalBookings * minPrice).ToString("F2"))</td>
                                        <td class="px-3 md:px-6 py-4">
                                            <div class="flex flex-wrap gap-1 md:gap-2">
                                                <!-- View Button -->
                                                <a asp-controller="Events" asp-action="Details" asp-route-id="@eventItem.Id" class="p-1 md:p-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all" title="View">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                    </svg>
                                                </a>
                                                
                                                <!-- Edit Button -->
                                                <a asp-controller="Organizer" asp-action="EditEvent" asp-route-id="@eventItem.Id" class="p-1 md:p-2 bg-green-500/20 text-green-400 rounded-lg hover:bg-green-500/30 transition-all" title="Edit">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                    </svg>
                                                </a>
                                                
                                                <!-- Publish/Unpublish Button -->
                                                @if (status == "Draft")
                                                {
                                                    <button onclick="publishEvent('@eventItem.Id')" class="p-1 md:p-2 bg-green-500/20 text-green-400 rounded-lg hover:bg-green-500/30 transition-all" title="Publish">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                                                        </svg>
                                                    </button>
                                                }
                                                else if (status == "Published")
                                                {
                                                    <button onclick="unpublishEvent('@eventItem.Id')" class="p-1 md:p-2 bg-yellow-500/20 text-yellow-400 rounded-lg hover:bg-yellow-500/30 transition-all" title="Unpublish">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                                                        </svg>
                                                    </button>
                                                }
                                                
                                                <!-- Cancel Button -->
                                                @if (status == "Published" || status == "Draft")
                                                {
                                                    <button onclick="cancelEvent('@eventItem.Id')" class="p-1 md:p-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-all" title="Cancel">
                                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                                        </svg>
                                                    </button>
                                                }
                                                
                                                <!-- Delete Button -->
                                                @if (status == "Draft" || status == "Cancelled")
                                                {
                                                <button onclick="deleteEvent('@eventItem.Id')" class="p-1 md:p-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-all" title="Delete">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                    </svg>
                                                </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="px-6 py-12 text-center text-gray-400">
                                        <div class="flex flex-col items-center space-y-4">
                                            <svg class="w-16 h-16 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                                            </svg>
                                            <div>
                                                <h3 class="text-lg font-semibold text-white mb-2">No events found</h3>
                                                <p class="text-gray-400 mb-4">You haven't created any events yet.</p>
                                                <a asp-controller="Organizer" asp-action="CreateEvent" class="bg-gradient-to-r from-purple-500 to-teal-500 text-white px-6 py-2 rounded-xl font-bold hover:from-purple-600 hover:to-teal-600 transition-all transform hover:scale-105 shadow-lg inline-flex items-center space-x-2">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                                    </svg>
                                                    <span>Create Your First Event</span>
                                                </a>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <section aria-label="Pagination" class="flex items-center justify-center space-x-2 mt-8">
                    <!-- Previous Button -->
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a asp-action="Events" asp-route-page="@(ViewBag.CurrentPage - 1)" asp-route-pageSize="@ViewBag.PageSize" class="px-4 py-2 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                        </a>
                    }
                    else
                    {
                        <button class="px-4 py-2 bg-white/10 border border-white/20 text-white rounded-xl opacity-50 cursor-not-allowed" disabled>
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                        </button>
                    }

                    <!-- Page Numbers -->
                    @{
                        int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                        int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == ViewBag.CurrentPage)
                        {
                            <span class="px-4 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold">@i</span>
                        }
                        else
                        {
                            <a asp-action="Events" asp-route-page="@i" asp-route-pageSize="@ViewBag.PageSize" class="px-4 py-2 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200">@i</a>
                        }
                    }

                    <!-- Next Button -->
                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a asp-action="Events" asp-route-page="@(ViewBag.CurrentPage + 1)" asp-route-pageSize="@ViewBag.PageSize" class="px-4 py-2 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </a>
                    }
                    else
                    {
                        <button class="px-4 py-2 bg-white/10 border border-white/20 text-white rounded-xl opacity-50 cursor-not-allowed" disabled>
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </button>
                    }
                </section>

                <!-- Pagination Info -->
                <div class="text-center mt-4 text-gray-400 text-sm">
                    Showing @((ViewBag.CurrentPage - 1) * ViewBag.PageSize + 1) to @(Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalCount)) of @ViewBag.TotalCount events
                </div>
            }
    </div>
</div>

@Html.AntiForgeryToken()


<script>
        // Helper function to get CSRF token
        function getToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
        }

        // Helper function to show message
        function showMessage(message, type = 'success') {
            const messageDiv = document.createElement('div');
            messageDiv.className = `mb-6 p-4 ${type === 'success' ? 'bg-green-500/20 border-green-500/30' : 'bg-red-500/20 border-red-500/30'} border rounded-2xl`;
            
            const icon = type === 'success' 
                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>'
                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>';
            
            messageDiv.innerHTML = `
                <div class="flex items-center space-x-3">
                    <svg class="w-5 h-5 ${type === 'success' ? 'text-green-400' : 'text-red-400'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        ${icon}
                    </svg>
                    <p class="${type === 'success' ? 'text-green-400' : 'text-red-400'} font-medium">${message}</p>
                </div>
            `;
            
            const container = document.querySelector('.min-h-screen .p-4');
            container.insertBefore(messageDiv, container.firstChild);
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                messageDiv.remove();
            }, 5000);
        }

        // Publish Event Function
        function publishEvent(eventId) {
            if (confirm('Are you sure you want to publish this event? It will be visible to the public.')) {
                fetch(`/organizer/publish-event/${eventId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getToken()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        showMessage('Event published successfully!', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showMessage('Error publishing event. Please try again.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error publishing event. Please try again.', 'error');
                });
            }
        }

        // Unpublish Event Function
        function unpublishEvent(eventId) {
            if (confirm('Are you sure you want to unpublish this event? It will no longer be visible to the public.')) {
                fetch(`/organizer/unpublish-event/${eventId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getToken()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        showMessage('Event unpublished successfully!', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showMessage('Error unpublishing event. Please try again.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error unpublishing event. Please try again.', 'error');
                });
            }
        }

        // Cancel Event Function
        function cancelEvent(eventId) {
            if (confirm('Are you sure you want to cancel this event? This action cannot be undone.')) {
                fetch(`/organizer/cancel-event/${eventId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getToken()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        showMessage('Event cancelled successfully!', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showMessage('Error cancelling event. Please try again.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error cancelling event. Please try again.', 'error');
                });
            }
        }

        // Delete Event Function
        function deleteEvent(eventId) {
            if (confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
                fetch(`/organizer/delete-event/${eventId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getToken()
                    }
                })
                .then(response => {
                    if (response.ok) {
                        showMessage('Event deleted successfully!', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showMessage('Error deleting event. Please try again.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showMessage('Error deleting event. Please try again.', 'error');
                });
            }
        }

        // Create Event Form Toggle
        document.addEventListener('DOMContentLoaded', function() {
            const toggleBtn = document.getElementById('toggleCreateForm');
            const toggleText = document.getElementById('toggleText');
            const createForm = document.getElementById('createEventForm');
            
            if (toggleBtn && createForm) {
                toggleBtn.addEventListener('click', function() {
                    createForm.classList.toggle('hidden');
                    if (createForm.classList.contains('hidden')) {
                        toggleText.textContent = 'Show Form';
                    } else {
                        toggleText.textContent = 'Hide Form';
                    }
                });
            }

            // View Toggle (Grid/Table)
            const gridViewBtn = document.getElementById('gridViewBtn');
            const tableViewBtn = document.getElementById('tableViewBtn');
            
            if (gridViewBtn && tableViewBtn) {
                gridViewBtn.addEventListener('click', function() {
                    // Switch to grid view
                    gridViewBtn.className = 'p-3 bg-gradient-to-r from-purple-500 to-teal-500 rounded-xl';
                    tableViewBtn.className = 'p-3 bg-white/10 border border-white/20 rounded-xl hover:bg-white/20 transition-all duration-200';
                });
                
                tableViewBtn.addEventListener('click', function() {
                    // Switch to table view (already active)
                    tableViewBtn.className = 'p-3 bg-gradient-to-r from-purple-500 to-teal-500 rounded-xl';
                    gridViewBtn.className = 'p-3 bg-white/10 border border-white/20 rounded-xl hover:bg-white/20 transition-all duration-200';
                });
            }
        });
    </script>
</div>
