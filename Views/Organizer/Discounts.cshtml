@model online_event_booking_system.Models.DiscountViewModel
@{
    ViewData["Title"] = "Discounts";
    Layout = "_DashboardLayout";
    var discounts = ViewBag.Discounts as IEnumerable<online_event_booking_system.Data.Entities.Discount> ?? new List<online_event_booking_system.Data.Entities.Discount>();
}

<div class="min-h-screen bg-dark-navy text-white pt-20">
    <div class="p-4 md:p-6 pt-8">
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-xl text-green-400 flex items-center space-x-3">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>@TempData["SuccessMessage"]</span>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-400 flex items-center space-x-3">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>@TempData["ErrorMessage"]</span>
                </div>
            }

            <div class="mb-8">
                <div class="flex flex-col md:flex-row items-start md:items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Discounts</h1>
                        <p class="text-gray-400">Create and manage discount codes for your events</p>
                    </div>
                    <div class="mt-4 md:mt-0 flex space-x-3">
                        <button class="bg-white/10 border border-white/20 text-white px-4 py-2 rounded-xl hover:bg-white/20 transition-all duration-200 flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            <span>Export</span>
                        </button>
                        <button onclick="openCreateDiscountModal()" class="bg-gradient-to-r from-purple-500 to-teal-500 text-white px-4 py-2 rounded-xl font-bold hover:from-purple-600 hover:to-teal-600 transition-all transform hover:scale-105 shadow-lg flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            <span>Create Discount</span>
                        </button>
                    </div>
                </div>
            </div>

            <section aria-label="Discount Statistics" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8">
                @{
                    var activeDiscounts = discounts.Count(d => d.IsActive && d.ValidTo > DateTime.UtcNow);
                    var totalDiscounts = discounts.Count();
                    var totalUsed = discounts.Sum(d => d.UsedCount);
                    var expiredDiscounts = discounts.Count(d => d.ValidTo <= DateTime.UtcNow);
                }
                
                <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition">
                    <div class="flex items-center justify-between mb-4">
                        <div class="p-3 bg-green-500/20 rounded-xl">
                            <svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <span class="text-green-400 text-sm font-semibold">Active</span>
                    </div>
                    <p class="text-gray-400 text-sm">Active Discounts</p>
                    <p class="text-3xl font-bold mt-2">@activeDiscounts</p>
                    <p class="text-gray-400 text-xs mt-1">Currently running</p>
                </div>
                
                <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition">
                    <div class="flex items-center justify-between mb-4">
                        <div class="p-3 bg-blue-500/20 rounded-xl">
                            <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                        </div>
                        <span class="text-blue-400 text-sm font-semibold">@totalDiscounts</span>
                    </div>
                    <p class="text-gray-400 text-sm">Total Discounts</p>
                    <p class="text-3xl font-bold mt-2">@totalDiscounts</p>
                    <p class="text-gray-400 text-xs mt-1">All time</p>
                </div>
                
                <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition">
                    <div class="flex items-center justify-between mb-4">
                        <div class="p-3 bg-purple-500/20 rounded-xl">
                            <svg class="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
                            </svg>
                        </div>
                        <span class="text-purple-400 text-sm font-semibold">@totalUsed</span>
                    </div>
                    <p class="text-gray-400 text-sm">Codes Used</p>
                    <p class="text-3xl font-bold mt-2">@totalUsed</p>
                    <p class="text-gray-400 text-xs mt-1">Total redemptions</p>
                </div>
                
                <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition">
                    <div class="flex items-center justify-between mb-4">
                        <div class="p-3 bg-red-500/20 rounded-xl">
                            <svg class="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <span class="text-red-400 text-sm font-semibold">@expiredDiscounts</span>
                    </div>
                    <p class="text-gray-400 text-sm">Expired</p>
                    <p class="text-3xl font-bold mt-2">@expiredDiscounts</p>
                    <p class="text-gray-400 text-xs mt-1">Past expiry date</p>
                </div>
            </section>

            
            <section aria-label="Filters" class="mb-8">
                <div class="flex flex-col lg:flex-row items-center justify-between space-y-4 lg:space-y-0 lg:space-x-4">
                    <div class="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 w-full lg:w-auto">
                        <div class="relative w-full sm:w-80">
                            <input type="text" 
                                   placeholder="Search discount codes..." 
                                   class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-2xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm">
                            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                        </div>
                        <select aria-label="Status filter" class="px-4 py-3 bg-white/10 border border-white/20 rounded-2xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm w-full sm:w-48">
                            <option>All Status</option>
                            <option>Active</option>
                            <option>Expired</option>
                            <option>Paused</option>
                        </select>
                        <select aria-label="Event filter" class="px-4 py-3 bg-white/10 border border-white/20 rounded-2xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm w-full sm:w-48">
                            <option>All Events</option>
                            <option>Summer Music Festival</option>
                            <option>Tech Conference 2024</option>
                            <option>Art Exhibition</option>
                        </select>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button class="p-3 bg-white/10 border border-white/20 rounded-xl hover:bg-white/20 transition-all duration-200" title="Grid View">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                            </svg>
                        </button>
                        <button class="p-3 bg-gradient-to-r from-purple-500 to-teal-500 rounded-xl" title="List View">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </section>

            <section aria-label="Discounts" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl overflow-hidden mb-8">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-white/10">
                            <tr>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Discount Code</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Type</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Value</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Event</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Usage</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Expires</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Status</th>
                                <th class="px-6 py-4 text-left text-sm font-semibold text-white">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="discountsTbody" class="divide-y divide-white/10">
                            @if (discounts.Any())
                            {
                                @foreach (var discount in discounts)
                                {
                                    var status = discount.IsActive && discount.ValidTo > DateTime.UtcNow ? "Active" : 
                                                discount.ValidTo <= DateTime.UtcNow ? "Expired" : "Inactive";
                                    var statusColor = status == "Active" ? "bg-green-500/20 text-green-400" : 
                                                     status == "Expired" ? "bg-red-500/20 text-red-400" : "bg-yellow-500/20 text-yellow-400";
                                    var usageText = discount.UsageLimit.HasValue ? $"{discount.UsedCount}/{discount.UsageLimit}" : $"{discount.UsedCount}/∞";
                                    var valueText = discount.Type == "Percent" ? $"{discount.Value}%" : $"${discount.Value}";
                                    var eventName = discount.Event?.Title ?? "All Events";
                                    
                                    <tr class="hover:bg-white/5 transition-all duration-200" data-discount-id="@discount.Id">
                                        <td class="px-6 py-4">
                                            <div class="flex items-center space-x-3">
                                                <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-teal-500 rounded-lg flex items-center justify-center">
                                                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                                    </svg>
                                                </div>
                                                <div>
                                                    <p class="text-white font-semibold" data-field="code">@discount.Code</p>
                                                    <p class="text-gray-400 text-sm" data-field="type">@discount.Type</p>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 text-gray-300" data-field="type">@discount.Type</td>
                                        <td class="px-6 py-4 text-white font-semibold" data-field="value">@valueText</td>
                                        <td class="px-6 py-4 text-gray-300" data-field="event">@eventName</td>
                                        <td class="px-6 py-4 text-gray-300" data-field="usage">@usageText</td>
                                        <td class="px-6 py-4 text-gray-300" data-field="expiry">@discount.ValidTo.ToString("MMM dd, yyyy")</td>
                                        <td class="px-6 py-4">
                                            <span class="px-3 py-1 rounded-full text-xs font-medium @statusColor" data-field="status">@status</span>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="flex space-x-2">
                                                <button onclick="openEditModal('@discount.Id')" class="p-2 bg-purple-500/20 text-purple-400 rounded-lg hover:bg-purple-500/30 transition-all" title="Edit">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                    </svg>
                                                </button>
                                                <button onclick="copyToClipboard('@discount.Code')" class="p-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all" title="Copy">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                                    </svg>
                                                </button>
                                                <button onclick="confirmDelete('@discount.Id', '@discount.Code')" class="p-2 bg-red-500/20 text-red-400 rounded-lg hover:bg-red-500/30 transition-all" title="Delete">
                                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="px-6 py-12 text-center text-gray-400">
                                        <div class="flex flex-col items-center space-y-4">
                                            <svg class="w-16 h-16 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                            </svg>
                                            <div>
                                                <h3 class="text-lg font-semibold text-white mb-2">No discounts found</h3>
                                                <p class="text-gray-400 mb-4">Create your first discount code to get started</p>
                                                <button onclick="openCreateDiscountModal()" class="bg-gradient-to-r from-purple-500 to-teal-500 text-white px-6 py-3 rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all">
                                                    Create Discount
                                                </button>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div class="px-6 py-4 border-t border-white/10">
                    <div class="flex items-center justify-between">
                                <div class="text-sm text-gray-400">
                                    Showing <span id="paginationFrom" class="font-semibold text-white">1</span> to <span id="paginationTo" class="font-semibold text-white">1</span> of <span id="paginationTotal" class="font-semibold text-white">0</span> results
                                </div>
                        <div class="flex items-center space-x-2">
                            <div id="paginationControls" class="flex items-center space-x-2"></div>
                        </div>
                    </div>
                </div>
            </section>
    </div>

    <div id="createDiscountModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
        <div class="bg-dark-navy/95 backdrop-blur-xl border border-white/10 rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold text-white">Create Discount</h2>
                    <button type="button" onclick="closeCreateDiscountModal()" class="p-2 hover:bg-white/10 rounded-lg transition-all">
                        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                <form asp-action="CreateDiscount" method="post" class="space-y-6">
                    @Html.AntiForgeryToken()
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label asp-for="Code" class="block text-sm font-medium text-gray-300 mb-2"></label>
                            <input asp-for="Code" type="text" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="e.g., EARLY20" maxlength="20">
                            <span asp-validation-for="Code" class="text-red-400 text-xs mt-1"></span>
                            <p class="text-gray-400 text-xs mt-1">Use uppercase letters and numbers only</p>
                        </div>
                        <div>
                            <label asp-for="Type" class="block text-sm font-medium text-gray-300 mb-2"></label>
                            <select asp-for="Type" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500">
                                <option value="@((int)DiscountType.Percentage)">Percentage</option>
                                <option value="@((int)DiscountType.FixedAmount)">Fixed Amount</option>
                            </select>
                            <span asp-validation-for="Type" class="text-red-400 text-xs mt-1"></span>
                        </div>
                        <div>
                            <label asp-for="Value" class="block text-sm font-medium text-gray-300 mb-2"></label>
                            <div class="relative">
                                <input asp-for="Value" type="number" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="0" min="0" step="0.01">
                                <span class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400" id="modalValueSuffix">%</span>
                            </div>
                            <span asp-validation-for="Value" class="text-red-400 text-xs mt-1"></span>
                        </div>
                        <div>
                            <label asp-for="EventId" class="block text-sm font-medium text-gray-300 mb-2"></label>
                            <select asp-for="EventId" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" required>
                                <option value="">Select an event</option>
                                @foreach (var eventOption in Model.AvailableEvents)
                                {
                                    <option value="@eventOption.Id">@eventOption.Name - @eventOption.EventDate.ToString("MMM dd, yyyy")</option>
                                }
                            </select>
                            <span asp-validation-for="EventId" class="text-red-400 text-xs mt-1"></span>
                            <p class="text-gray-400 text-xs mt-1">Please select an event for this discount</p>
                        </div>
                        <div>
                            <label asp-for="UsageLimit" class="block text-sm font-medium text-gray-300 mb-2"></label>
                            <input asp-for="UsageLimit" type="number" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="100" min="1">
                            <span asp-validation-for="UsageLimit" class="text-red-400 text-xs mt-1"></span>
                            <p class="text-gray-400 text-xs mt-1">Leave empty for unlimited usage</p>
                        </div>
                        <div>
                            <label asp-for="ExpiryDate" class="block text-sm font-medium text-gray-300 mb-2"></label>
                            <input asp-for="ExpiryDate" type="date" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500">
                            <span asp-validation-for="ExpiryDate" class="text-red-400 text-xs mt-1"></span>
                        </div>
                    </div>
                    <div>
                        <label asp-for="Description" class="block text-sm font-medium text-gray-300 mb-2"></label>
                        <textarea asp-for="Description" rows="3" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="Describe this discount code..."></textarea>
                        <span asp-validation-for="Description" class="text-red-400 text-xs mt-1"></span>
                    </div>
                    <div class="flex justify-end space-x-4">
                        <button type="button" onclick="closeCreateDiscountModal()" class="px-6 py-3 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200">
                            Cancel
                        </button>
                        <button type="submit" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all">
                            Create Discount
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div id="editDiscountModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
        <div class="bg-dark-navy/95 backdrop-blur-xl border border-white/10 rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold text-white">Edit Discount</h2>
                    <button onclick="closeEditModal()" class="p-2 hover:bg-white/10 rounded-lg transition-all">
                        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
                
                <form id="editDiscountForm" method="post" class="space-y-6">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="editDiscountId" name="id" />
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Discount Code</label>
                            <input type="text" id="editCode" name="Code" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="e.g., EARLY20" maxlength="20">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Discount Type</label>
                            <select id="editType" name="Type" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500">
                                <option value="1">Percentage</option>
                                <option value="2">Fixed Amount</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Discount Value</label>
                            <div class="relative">
                                <input type="number" id="editValue" name="Value" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="0" min="0" step="0.01">
                                <span class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400" id="editValueSuffix">%</span>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Event</label>
                            <select id="editEvent" name="EventId" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" required>
                                <option value="">Select an event</option>
                                @foreach (var eventOption in Model.AvailableEvents)
                                {
                                    <option value="@eventOption.Id">@eventOption.Name - @eventOption.EventDate.ToString("MMM dd, yyyy")</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Usage Limit</label>
                            <input type="number" id="editLimit" name="UsageLimit" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="100" min="1">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-2">Expiry Date</label>
                            <input type="date" id="editExpiry" name="ExpiryDate" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500">
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                        <textarea rows="3" id="editDescription" name="Description" class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500" placeholder="Describe this discount code..."></textarea>
                    </div>
                    <div class="flex items-center space-x-3">
                        <input type="checkbox" id="editIsActive" name="IsActive" class="w-4 h-4 text-purple-600 bg-white/10 border-white/20 rounded focus:ring-purple-500 focus:ring-2">
                        <label class="text-gray-300">Active</label>
                    </div>
                    <div class="flex justify-end space-x-4">
                        <button type="button" onclick="closeEditModal()" class="px-6 py-3 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200">
                            Cancel
                        </button>
                        <button type="submit" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all">
                            Update Discount
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <script>
        function openCreateDiscountModal() {
            const modal = document.getElementById('createDiscountModal');
            if (modal) {
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }
        }
        function closeCreateDiscountModal() {
            const modal = document.getElementById('createDiscountModal');
            if (modal) {
                modal.classList.add('hidden');
                document.body.style.overflow = '';
            }
        }
        document.addEventListener('DOMContentLoaded', function () {
            const typeSelect = document.querySelector('#createDiscountModal select[name="Type"]');
            const valueSuffix = document.getElementById('modalValueSuffix');
            if (typeSelect && valueSuffix) {
                typeSelect.addEventListener('change', function () {
                    valueSuffix.textContent = this.value === '2' ? '$' : '%';
                });
            }
            
        });
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                const modal = document.getElementById('createDiscountModal');
                if (modal && !modal.classList.contains('hidden')) {
                    closeCreateDiscountModal();
                }
            }
        });
        document.addEventListener('click', function (event) {
            const modal = document.getElementById('createDiscountModal');
            if (modal && event.target === modal) {
                closeCreateDiscountModal();
            }
        });
    </script>

    <script>
        (function() {
            var openCreate = '@(ViewData["OpenCreateModal"] != null ? "1" : "")';
            var openEditId = '@(ViewData["OpenEditModal"] ?? "")';

            if (openCreate) {
                document.addEventListener('DOMContentLoaded', function() {
                    try { openCreateDiscountModal(); } catch (e) { console.error(e); }
                });
            }

            if (openEditId) {
                var serverModel = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model ?? new online_event_booking_system.Models.DiscountViewModel()));

                document.addEventListener('DOMContentLoaded', function() {
                    try {
                        var m = serverModel || {};
                        var idField = document.getElementById('editDiscountId');
                        if (idField) idField.value = openEditId;

                        var f = function(id, val) { var el = document.getElementById(id); if (el) el.value = val ?? ''; };

                        f('editCode', m.Code);
                        f('editType', (m.Type !== undefined && m.Type !== null) ? String(m.Type) : '1');
                        f('editValue', m.Value);
                        f('editLimit', m.UsageLimit);
                        if (m.ExpiryDate) {
                            var d = new Date(m.ExpiryDate);
                            if (!isNaN(d)) document.getElementById('editExpiry').value = d.toISOString().split('T')[0];
                        }
                        f('editDescription', m.Description);
                        var chk = document.getElementById('editIsActive'); if (chk) chk.checked = !!m.IsActive;
                        var ev = document.getElementById('editEvent'); if (ev) ev.value = m.EventId || '';

                        var editValueSuffix = document.getElementById('editValueSuffix');
                        if (editValueSuffix) {
                            editValueSuffix.textContent = (m.Type === 2) ? '$' : '%';
                        }

                        var modal = document.getElementById('editDiscountModal');
                        if (modal) {
                            // set form action to edit POST endpoint
                            var editFormEl = document.getElementById('editDiscountForm');
                            if (editFormEl) {
                                var editBase = '@Url.Action("EditDiscount", "Organizer", new { id = "__ID__" })';
                                editFormEl.action = editBase.replace('__ID__', openEditId);
                            }
                            modal.classList.remove('hidden');
                            document.body.style.overflow = 'hidden';
                        }
                    } catch (err) {
                        console.error('Error opening edit modal from server data:', err);
                    }
                });
            }
        })();
    </script>


    <script>
        document.addEventListener('keydown', function (event) {
            if (event.key === 'Escape') {
                const modal = document.getElementById('editDiscountModal');
                if (!modal.classList.contains('hidden')) {
                    closeEditModal();
                }
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            const toggleBtn = document.getElementById('toggleCreateForm');
            const toggleBtn2 = document.getElementById('toggleCreateForm2');
            const toggleText = document.getElementById('toggleText');
            const toggleText2 = document.getElementById('toggleText2');
            const createForm = document.getElementById('createDiscountForm');
            
            function toggleForm() {
                if (createForm) {
                    createForm.classList.toggle('hidden');
                    const isHidden = createForm.classList.contains('hidden');
                    if (toggleText) toggleText.textContent = isHidden ? 'Create Discount' : 'Hide Form';
                    if (toggleText2) toggleText2.textContent = isHidden ? 'Show Form' : 'Hide Form';
                }
            }
            
            if (toggleBtn) {
                toggleBtn.addEventListener('click', toggleForm);
            }
            if (toggleBtn2) {
                toggleBtn2.addEventListener('click', toggleForm);
            }

            const typeSelect = document.querySelector('select[name="Type"]');
            const valueSuffix = document.getElementById('valueSuffix');
            const editTypeSelect = document.getElementById('editType');
            const editValueSuffix = document.getElementById('editValueSuffix');
            
            if (typeSelect && valueSuffix) {
                typeSelect.addEventListener('change', function() {
                    valueSuffix.textContent = this.value === '2' ? '$' : '%'; 
                });
            }
            
            if (editTypeSelect && editValueSuffix) {
                editTypeSelect.addEventListener('change', function() {
                    editValueSuffix.textContent = this.value === '2' ? '$' : '%';
                });
            }

            
        });

        (function() {
            const rowsPerPage = 15; // default page size
            let currentPage = 1;

            function getRows() {
                const tbody = document.getElementById('discountsTbody');
                if (!tbody) return [];
                return Array.from(tbody.querySelectorAll('tr'));
            }

            function renderPaginationControls(totalPages) {
                const container = document.getElementById('paginationControls');
                if (!container) return;
                container.innerHTML = '';

                const prev = document.createElement('button');
                prev.className = 'px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200';
                prev.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>';
                prev.disabled = currentPage === 1;
                prev.addEventListener('click', () => { if (currentPage > 1) { currentPage--; paginate(); } });
                container.appendChild(prev);

                const maxButtons = 7;
                let start = Math.max(1, currentPage - Math.floor(maxButtons / 2));
                let end = Math.min(totalPages, start + maxButtons - 1);
                if (end - start < maxButtons - 1) start = Math.max(1, end - maxButtons + 1);

                if (start > 1) {
                    container.appendChild(pageButton(1));
                    if (start > 2) container.appendChild(ellipsis());
                }

                for (let i = start; i <= end; i++) {
                    container.appendChild(pageButton(i));
                }

                if (end < totalPages) {
                    if (end < totalPages - 1) container.appendChild(ellipsis());
                    container.appendChild(pageButton(totalPages));
                }

                const next = document.createElement('button');
                next.className = 'px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200';
                next.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>';
                next.disabled = currentPage === totalPages;
                next.addEventListener('click', () => { if (currentPage < totalPages) { currentPage++; paginate(); } });
                container.appendChild(next);
            }

            function pageButton(page) {
                const btn = document.createElement('button');
                btn.className = page === currentPage ? 'px-3 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-lg font-semibold' : 'px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200';
                btn.textContent = page;
                btn.addEventListener('click', () => { currentPage = page; paginate(); });
                return btn;
            }

            function ellipsis() {
                const span = document.createElement('span');
                span.className = 'px-3 py-2 text-gray-400';
                span.textContent = '...';
                return span;
            }

            function paginate() {
                const rows = getRows();
                const total = rows.length;
                const totalPages = Math.max(1, Math.ceil(total / rowsPerPage));
                if (currentPage > totalPages) currentPage = totalPages;

                const start = (currentPage - 1) * rowsPerPage;
                const end = Math.min(total, start + rowsPerPage);

                rows.forEach((r, idx) => {
                    r.style.display = (idx >= start && idx < end) ? '' : 'none';
                });

                document.getElementById('paginationFrom').textContent = total === 0 ? 0 : (start + 1);
                document.getElementById('paginationTo').textContent = end;
                document.getElementById('paginationTotal').textContent = total;

                renderPaginationControls(totalPages);
            }

            document.addEventListener('DOMContentLoaded', function() {
                setTimeout(() => {
                    currentPage = 1;
                    paginate();
                }, 50);
            });
        })();

        
        function openEditModal(discountId) {
            console.log('Opening edit modal for discount ID:', discountId);
            
            const modal = document.getElementById('editDiscountModal');
            if (modal) {
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }


            document.getElementById('editDiscountId').value = discountId;
            // set form action to include id so normal form POST works with antiforgery token
            const editFormEl = document.getElementById('editDiscountForm');
            if (editFormEl) {
                const editBase = '@Url.Action("EditDiscount", "Organizer", new { id = "__ID__" })';
                editFormEl.action = editBase.replace('__ID__', discountId);
            }

            const baseUrl = '@Url.Action("GetDiscountData", "Organizer", new { id = "__ID__" })';
            const url = baseUrl.replace('__ID__', discountId);
            console.log('Fetching from URL:', url);

            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Received data:', data);
                    if (data && data.success) {
                        const raw = data.data || data;

                        const get = (obj, pascal) => {
                            const camel = pascal.charAt(0).toLowerCase() + pascal.slice(1);
                            return obj[pascal] !== undefined ? obj[pascal] : obj[camel];
                        };

                        const discount = {
                            Code: get(raw, 'Code') || '',
                            Type: get(raw, 'Type') !== undefined ? get(raw, 'Type') : 1,
                            Value: get(raw, 'Value') !== undefined ? get(raw, 'Value') : '',
                            UsageLimit: get(raw, 'UsageLimit') !== undefined ? get(raw, 'UsageLimit') : '',
                            ExpiryDate: get(raw, 'ExpiryDate') || get(raw, 'expiryDate') || null,
                            Description: get(raw, 'Description') || '',
                            IsActive: get(raw, 'IsActive') !== undefined ? get(raw, 'IsActive') : false,
                            EventId: get(raw, 'EventId') || get(raw, 'eventId') || ''
                        };

                        console.log('Normalized discount data:', discount);

                        document.getElementById('editCode').value = discount.Code;
                        document.getElementById('editType').value = String(discount.Type);
                        document.getElementById('editValue').value = discount.Value;
                        document.getElementById('editLimit').value = discount.UsageLimit;

                        if (discount.ExpiryDate) {
                            const date = new Date(discount.ExpiryDate);
                            if (!isNaN(date)) {
                                document.getElementById('editExpiry').value = date.toISOString().split('T')[0];
                            } else {
                                document.getElementById('editExpiry').value = '';
                            }
                        } else {
                            document.getElementById('editExpiry').value = '';
                        }

                        document.getElementById('editDescription').value = discount.Description;
                        document.getElementById('editIsActive').checked = !!discount.IsActive;

                        const eventSelect = document.getElementById('editEvent');
                        if (eventSelect) eventSelect.value = discount.EventId || '';

                        const editValueSuffix = document.getElementById('editValueSuffix');
                        if (editValueSuffix) {
                            const t = Number(discount.Type);
                            editValueSuffix.textContent = t === 2 ? '$' : '%';
                        }

                        console.log('Form populated successfully');
                    } else {
                        console.error('Error from server:', data && data.message ? data.message : data);
                        alert('Error loading discount data: ' + (data && data.message ? data.message : 'Unknown error'));
                        closeEditModal();
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    alert('Error loading discount data. Please try again.');
                    closeEditModal();
                });
        }

        function closeEditModal() {
            const modal = document.getElementById('editDiscountModal');
            if (modal) {
                modal.classList.add('hidden');
                document.body.style.overflow = '';
            }
        }

        document.addEventListener('click', function(event) {
            const modal = document.getElementById('editDiscountModal');
            if (modal && event.target === modal) {
                closeEditModal();
            }
        });

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                const toast = document.createElement('div');
                toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
                toast.textContent = 'Discount code copied to clipboard!';
                document.body.appendChild(toast);
                
                setTimeout(() => {
                    document.body.removeChild(toast);
                }, 3000);
            }).catch(function(err) {
                console.error('Could not copy text: ', err);
            });
        }

        function confirmDelete(discountId, discountCode) {
            if (!confirm(`Are you sure you want to delete the discount code "${discountCode}"? This action cannot be undone.`)) return;

            try {
                const form = document.createElement('form');
                form.method = 'POST';

                const deleteTemplate = '/organizer/discounts/delete/__ID__';
                form.action = deleteTemplate.replace('__ID__', discountId);

                console.log('Submitting delete to:', form.action);

                let token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!token) {
                    const meta = document.querySelector('meta[name="__RequestVerificationToken"]');
                    if (meta && meta.content) {
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = meta.content;
                        form.appendChild(tokenInput);
                    }
                } else {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                document.body.appendChild(form);
                form.submit();
            } catch (err) {
                console.error('Error performing delete:', err);
                alert('Unable to delete discount. Check console for details.');
            }
        }

    </script>

    <script>
        (function() {
            // Use JSON serialization to safely embed the server TempData message into JS
            var successMessage = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["SuccessMessage"] ?? ""));
            if (successMessage) {
                document.addEventListener('DOMContentLoaded', function() {
                    try {
                        var cm = document.getElementById('createDiscountModal');
                        var em = document.getElementById('editDiscountModal');
                        if (cm && !cm.classList.contains('hidden')) cm.classList.add('hidden');
                        if (em && !em.classList.contains('hidden')) em.classList.add('hidden');
                        // restore page scroll in case a modal was open
                        document.body.style.overflow = '';
                        var banner = document.querySelector('[data-success-banner]');
                        if (banner) banner.focus();
                    } catch (e) {
                        console.error('Error hiding modals after success:', e);
                    }
                });
            }
        })();
    </script>

    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
</div>
