@model online_event_booking_system.Models.View_Models.CreateEventViewModel
@{
    ViewData["Title"] = "Create Event";
    Layout = "_DashboardLayout";
}

<!-- Organizer Create Event Container -->
<div class="min-h-screen bg-dark-navy text-white pt-20">
    <!-- Main Content -->
    <div class="p-4 md:p-6 pt-8">
            <!-- Page Header -->
            <div class="mb-8">
                <div class="flex flex-col md:flex-row items-start md:items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Create New Event</h1>
                        <p class="text-gray-400">Set up your event details, pricing, and ticketing options</p>
                    </div>
                    <div class="mt-4 md:mt-0 flex space-x-3">
                        <button type="button" onclick="saveAsDraft()" class="bg-dark-navy border border-white/20 text-white px-4 py-2 rounded-xl hover:bg-white/20 transition-all duration-200">
                            Save as Draft
                        </button>
                        <button type="button" onclick="previewEvent()" class="bg-gradient-to-r from-purple-500 to-teal-500 text-white px-4 py-2 rounded-xl font-bold hover:from-purple-600 hover:to-teal-600 transition-all transform hover:scale-105 shadow-lg">
                            Preview Event
                        </button>
                    </div>
                </div>
            </div>

            <!-- Success/Error Messages -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-xl text-green-400">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        @TempData["SuccessMessage"]
                    </div>
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-400">
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                        @TempData["ErrorMessage"]
                    </div>
                </div>
            }

            <!-- Form Progress -->
            <section aria-label="Form Progress" class="mb-8">
                <div class="flex items-center justify-center md:justify-start">
                    <div class="flex items-center space-x-2 md:space-x-4 overflow-x-auto">
                        <div class="flex items-center space-x-2">
                            <div class="w-8 h-8 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                                <span class="text-white text-sm font-bold">1</span>
                            </div>
                            <span class="text-white font-semibold text-sm md:text-base">Basic Info</span>
                        </div>
                        <div class="w-8 md:w-16 h-1 bg-white/20 rounded-full">
                            <div class="w-full h-1 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full"></div>
                        </div>
                        <div class="flex items-center space-x-2">
                            <div class="w-8 h-8 bg-dark-navy border border-white/20 rounded-full flex items-center justify-center">
                                <span class="text-gray-400 text-sm font-bold">2</span>
                            </div>
                            <span class="text-gray-400 font-semibold text-sm md:text-base">Details</span>
                        </div>
                        <div class="w-8 md:w-16 h-1 bg-white/20 rounded-full"></div>
                        <div class="flex items-center space-x-2">
                            <div class="w-8 h-8 bg-dark-navy border border-white/20 rounded-full flex items-center justify-center">
                                <span class="text-gray-400 text-sm font-bold">3</span>
                            </div>
                            <span class="text-gray-400 font-semibold text-sm md:text-base">Tickets</span>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Event Creation Form -->
            <form asp-action="CreateEvent" asp-controller="Organizer" method="post" enctype="multipart/form-data" class="space-y-8" id="eventForm">
                @Html.AntiForgeryToken()
                
                <!-- Basic Information -->
                <section aria-label="Basic Information" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6">
                    <h2 class="text-xl font-bold mb-6">Basic Information</h2>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <div class="space-y-6">
                            <div>
                                <label asp-for="Title" class="block text-sm font-medium text-gray-300 mb-2">Event Title *</label>
                                <input asp-for="Title" type="text" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="Enter your event title">
                                <span asp-validation-for="Title" class="text-red-400 text-sm mt-1"></span>
                            </div>
                            
                            <div>
                                <label asp-for="CategoryId" class="block text-sm font-medium text-gray-300 mb-2">Event Category *</label>
                                <select asp-for="CategoryId" asp-items="@(new SelectList(Model.Categories, "Id", "Name", Model.CategoryId))" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                    <option class="bg-dark-navy text-foreground" value="">Select category</option>
                                </select>
                                <span asp-validation-for="CategoryId" class="text-red-400 text-sm mt-1"></span>
                            </div>
                            
                            <div>
                                <label asp-for="VenueId" class="block text-sm font-medium text-gray-300 mb-2">Venue *</label>
                                <select asp-for="VenueId" asp-items="@(new SelectList(Model.Venues, "Id", "Name", Model.VenueId))" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                    <option class="bg-dark-navy text-foreground" value="">Select venue</option>
                                </select>
                                <span asp-validation-for="VenueId" class="text-red-400 text-sm mt-1"></span>
                            </div>

                            <div>
                                <label asp-for="TotalCapacity" class="block text-sm font-medium text-gray-300 mb-2">Total Capacity *</label>
                                <input asp-for="TotalCapacity" id="TotalCapacity" type="number" min="1" max="100000" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="Maximum attendees">
                                <span asp-validation-for="TotalCapacity" class="text-red-400 text-sm mt-1"></span>
                                <p id="CapacityMismatchError" class="text-red-400 text-xs mt-1 hidden">Total capacity must equal the sum of all ticket quantities.</p>
                            </div>
                        </div>
                        
                        <div class="space-y-6">
                            <div>
                                <label asp-for="Description" class="block text-sm font-medium text-gray-300 mb-2">Event Description *</label>
                                <textarea asp-for="Description" rows="6" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm resize-none" placeholder="Describe your event in detail..."></textarea>
                                <span asp-validation-for="Description" class="text-red-400 text-sm mt-1"></span>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">Event Image</label>
                                <div class="border-2 border-dashed border-white/20 rounded-xl p-6 text-center hover:border-purple-500/50 transition-all cursor-pointer" onclick="document.getElementById('ImageFile').click()">
                                    <input asp-for="ImageFile" type="file" id="ImageFile" accept="image/*" class="hidden" onchange="previewImage(this)">
                                    <div id="imagePreview" class="hidden mb-4">
                                        <img id="previewImg" class="w-full h-48 object-cover rounded-lg">
                                    </div>
                                    <div id="imageUploadArea">
                                        <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                        </svg>
                                        <p class="text-gray-400 mb-2">Click to upload or drag and drop</p>
                                        <p class="text-gray-500 text-sm">PNG, JPG, GIF, WebP up to 10MB</p>
                                    </div>
                                </div>
                                <span asp-validation-for="ImageFile" class="text-red-400 text-sm mt-1"></span>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Date & Time -->
                <section aria-label="Date & Time" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6">
                    <h2 class="text-xl font-bold mb-6">Date & Time</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <div>
                            <label asp-for="EventDate" class="block text-sm font-medium text-gray-300 mb-2">Start Date *</label>
                            <input asp-for="EventDate" type="date" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer" min="@DateTime.Today.ToString("yyyy-MM-dd")" max="@DateTime.Today.AddMonths(6).ToString("yyyy-MM-dd")">
                            <span asp-validation-for="EventDate" class="text-red-400 text-sm mt-1"></span>
                        </div>
                        
                        <div>
                            <label asp-for="StartTime" class="block text-sm font-medium text-gray-300 mb-2">Start Time *</label>
                            <input asp-for="StartTime" type="time" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                            <span asp-validation-for="StartTime" class="text-red-400 text-sm mt-1"></span>
                        </div>
                        
                        <div>
                            <label asp-for="EndTime" class="block text-sm font-medium text-gray-300 mb-2">End Time *</label>
                            <input asp-for="EndTime" type="time" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                            <span asp-validation-for="EndTime" class="text-red-400 text-sm mt-1"></span>
                        </div>
                    </div>
                    
                    <div class="mt-6">
                        <label class="flex items-center space-x-3">
                            <input asp-for="IsMultiDay" type="checkbox" class="text-purple-500 focus:ring-purple-500 rounded">
                            <span class="text-gray-300">This is a multi-day event</span>
                        </label>
                    </div>
                </section>

                <!-- Ticket Information -->
                <section aria-label="Ticket Information" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6">
                    <h2 class="text-xl font-bold mb-6">Ticket Information</h2>
                    <div class="space-y-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label asp-for="TicketSalesStart" class="block text-sm font-medium text-gray-300 mb-2">Ticket Sales Start</label>
                                <input asp-for="TicketSalesStart" type="datetime-local" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                <span asp-validation-for="TicketSalesStart" class="text-red-400 text-sm mt-1"></span>
                            </div>
                            
                            <div>
                                <label asp-for="TicketSalesEnd" class="block text-sm font-medium text-gray-300 mb-2">Ticket Sales End</label>
                                <input asp-for="TicketSalesEnd" type="datetime-local" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                <span asp-validation-for="TicketSalesEnd" class="text-red-400 text-sm mt-1"></span>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label asp-for="RefundPolicy" class="block text-sm font-medium text-gray-300 mb-2">Refund Policy</label>
                                <select asp-for="RefundPolicy" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                    <option class="bg-dark-navy text-foreground" value="No Refunds">No Refunds</option>
                                    <option class="bg-dark-navy text-foreground" value="Full Refund (7 days before)">Full Refund (7 days before)</option>
                                    <option class="bg-dark-navy text-foreground" value="Full Refund (24 hours before)">Full Refund (24 hours before)</option>
                                    <option class="bg-dark-navy text-foreground" value="Partial Refund">Partial Refund</option>
                                </select>
                                <span asp-validation-for="RefundPolicy" class="text-red-400 text-sm mt-1"></span>
                            </div>
                            
                            <div>
                                <label asp-for="AgeRestriction" class="block text-sm font-medium text-gray-300 mb-2">Age Restriction</label>
                                <select asp-for="AgeRestriction" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                    <option class="bg-dark-navy text-foreground" value="All Ages">All Ages</option>
                                    <option class="bg-dark-navy text-foreground" value="18+ Only">18+ Only</option>
                                    <option class="bg-dark-navy text-foreground" value="21+ Only">21+ Only</option>
                                    <option class="bg-dark-navy text-foreground" value="Family Friendly">Family Friendly</option>
                                </select>
                                <span asp-validation-for="AgeRestriction" class="text-red-400 text-sm mt-1"></span>
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Ticket Types -->
                <section aria-label="Ticket Types" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h2 class="text-xl font-bold">Ticket Types</h2>
                        <button type="button" onclick="addTicketType()" class="bg-gradient-to-r from-purple-500 to-teal-500 text-white px-4 py-2 rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all transform hover:scale-105">
                            Add Ticket Type
                        </button>
                    </div>
                    
                    <div id="ticketTypesContainer" class="space-y-4">
                        @for (int i = 0; i < (Model.EventPrices?.Count ?? 0); i++)
                        {
                            <div class="ticket-type-item bg-white/5 border border-white/10 rounded-xl p-4">
                                <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-300 mb-2">Name *</label>
                                        <input asp-for="EventPrices[i].Category" type="text" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="e.g., General Admission">
                                        <span asp-validation-for="EventPrices[i].Category" class="text-red-400 text-sm mt-1"></span>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-300 mb-2">Price *</label>
                                        <input asp-for="EventPrices[i].Price" type="number" min="0" step="0.01" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="0.00">
                                        <span asp-validation-for="EventPrices[i].Price" class="text-red-400 text-sm mt-1"></span>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-300 mb-2">Quantity *</label>
                                        <input asp-for="EventPrices[i].Stock" type="number" min="1" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="100">
                                        <span asp-validation-for="EventPrices[i].Stock" class="text-red-400 text-sm mt-1"></span>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-300 mb-2">Type</label>
                                        <select asp-for="EventPrices[i].PriceType" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                                            <option class="bg-dark-navy text-foreground" value="Standard">Standard</option>
                                            <option class="bg-dark-navy text-foreground" value="Early Bird">Early Bird</option>
                                            <option class="bg-dark-navy text-foreground" value="VIP">VIP</option>
                                            <option class="bg-dark-navy text-foreground" value="Group">Group</option>
                                            <option class="bg-dark-navy text-foreground" value="Student">Student</option>
                                            <option class="bg-dark-navy text-foreground" value="Senior">Senior</option>
                                            <option class="bg-dark-navy text-foreground" value="Child">Child</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                                        <input asp-for="EventPrices[i].Description" type="text" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="Optional description">
                                    </div>
                                    <div class="flex items-end">
                                        <button type="button" onclick="removeTicketType(this)" class="w-full bg-red-500/20 text-red-400 px-3 py-2 rounded-lg hover:bg-red-500/30 transition-all">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                                <div class="mt-3 flex items-center space-x-4">
                                    <label class="flex items-center space-x-2">
                                        <input asp-for="EventPrices[i].IsActive" type="checkbox" class="text-purple-500 focus:ring-purple-500 rounded">
                                        <span class="text-gray-300 text-sm">Active</span>
                                    </label>
                                </div>
                            </div>
                        }
                        
                        <!-- Add New Ticket Type Button -->
                        <div onclick="addTicketType()" class="border-2 border-dashed border-white/20 rounded-xl p-6 text-center hover:border-purple-500/50 transition-all cursor-pointer">
                            <svg class="w-8 h-8 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            <p class="text-gray-400">Add another ticket type</p>
                        </div>
                    </div>
                </section>

                <!-- Additional Settings -->
                <section aria-label="Additional Settings" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6">
                    <h2 class="text-xl font-bold mb-6">Additional Settings</h2>
                    <div class="space-y-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label asp-for="Tags" class="block text-sm font-medium text-gray-300 mb-2">Event Tags</label>
                                <input asp-for="Tags" type="text" class="w-full px-4 py-3 bg-dark-navy border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="music, festival, outdoor (comma separated)">
                                <span asp-validation-for="Tags" class="text-red-400 text-sm mt-1"></span>
                            </div>
                            
                            <div>
                                <label class="block text-sm font-medium text-gray-300 mb-2">Total Capacity Validation</label>
                                <div class="p-4 bg-blue-500/10 border border-blue-500/20 rounded-xl">
                                    <p class="text-blue-400 text-sm">
                                        <span id="totalCapacityDisplay">0</span> / <span id="maxCapacityDisplay">0</span> tickets
                                    </p>
                                    <p class="text-gray-400 text-xs mt-1">Total capacity must match the sum of all ticket quantities</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="space-y-4">
                            <h3 class="text-lg font-semibold">Event Features</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            </div>
                        </div>
                    </div>
                </section>

                <!-- Form Actions -->
                <section aria-label="Form Actions" class="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0 sm:space-x-4">
                    <a asp-action="Events" asp-controller="Organizer" class="w-full sm:w-auto bg-dark-navy border border-white/20 text-white px-6 py-3 rounded-xl hover:bg-white/20 transition-all duration-200 text-center">
                        Cancel
                    </a>
                    <div class="flex space-x-4 w-full sm:w-auto">
                        <button type="button" onclick="saveAsDraft()" id="draftBtn" class="flex-1 sm:flex-none bg-dark-navy border border-white/20 text-white px-6 py-3 rounded-xl hover:bg-white/20 transition-all duration-200">
                            <span class="draft-text">Save as Draft</span>
                            <span class="draft-loading hidden">
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Saving...
                            </span>
                        </button>
                        <button type="submit" id="submitBtn" class="flex-1 sm:flex-none bg-gradient-to-r from-purple-500 to-teal-500 text-white px-6 py-3 rounded-xl font-bold hover:from-purple-600 hover:to-teal-600 transition-all transform hover:scale-105 shadow-lg">
                            <span class="submit-text">Create Event</span>
                            <span class="submit-loading hidden">
                                <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Creating...
                            </span>
                        </button>
                    </div>
                </section>
            </form>
    </div>

    <script>
        // Form submission tracking
        let isSubmitting = false;
        
        // Ticket Type Management
        let ticketTypeCount = @(Model.EventPrices?.Count ?? 0);

        function addTicketType() {
            const container = document.getElementById('ticketTypesContainer');
            const addButton = container.querySelector('.border-dashed');
            
            const newTicketType = document.createElement('div');
            newTicketType.className = 'ticket-type-item bg-white/5 border border-white/10 rounded-xl p-4';
            newTicketType.innerHTML = `
                <div class="grid grid-cols-1 md:grid-cols-6 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Name *</label>
                        <input type="text" name="EventPrices[${ticketTypeCount}].Category" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="e.g., General Admission" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Price *</label>
                        <input type="number" name="EventPrices[${ticketTypeCount}].Price" min="0" step="0.01" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="0.00" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Quantity *</label>
                        <input type="number" name="EventPrices[${ticketTypeCount}].Stock" min="1" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="100" required onchange="updateCapacityValidation()">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Type</label>
                        <select name="EventPrices[${ticketTypeCount}].PriceType" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm cursor-pointer">
                            <option class="bg-dark-navy text-foreground" value="Standard">Standard</option>
                            <option class="bg-dark-navy text-foreground" value="Early Bird">Early Bird</option>
                            <option class="bg-dark-navy text-foreground" value="VIP">VIP</option>
                            <option class="bg-dark-navy text-foreground" value="Group">Group</option>
                            <option class="bg-dark-navy text-foreground" value="Student">Student</option>
                            <option class="bg-dark-navy text-foreground" value="Senior">Senior</option>
                            <option class="bg-dark-navy text-foreground" value="Child">Child</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                        <input type="text" name="EventPrices[${ticketTypeCount}].Description" class="w-full px-3 py-2 bg-dark-navy border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 backdrop-blur-sm" placeholder="Optional description">
                    </div>
                    <div class="flex items-end">
                        <button type="button" onclick="removeTicketType(this)" class="w-full bg-red-500/20 text-red-400 px-3 py-2 rounded-lg hover:bg-red-500/30 transition-all">
                            Remove
                        </button>
                    </div>
                </div>
                <div class="mt-3 flex items-center space-x-4">
                    <label class="flex items-center space-x-2">
                        <input type="checkbox" name="EventPrices[${ticketTypeCount}].IsActive" class="text-purple-500 focus:ring-purple-500 rounded" checked>
                        <span class="text-gray-300 text-sm">Active</span>
                    </label>
                </div>
            `;
            
            container.insertBefore(newTicketType, addButton);
            ticketTypeCount++;
            updateCapacityValidation();
        }

        function removeTicketType(button) {
            const ticketType = button.closest('.ticket-type-item');
            ticketType.remove();
            updateCapacityValidation();
        }

        // Image preview functionality
        function previewImage(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('imagePreview');
                    const uploadArea = document.getElementById('imageUploadArea');
                    const img = document.getElementById('previewImg');
                    
                    img.src = e.target.result;
                    preview.classList.remove('hidden');
                    uploadArea.classList.add('hidden');
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        // Capacity validation
        function updateCapacityValidation() {
            const totalCapacityEl = document.getElementById('TotalCapacity');
            const submitBtn = document.getElementById('submitBtn');
            const errorText = document.getElementById('CapacityMismatchError');
            const totalCapacity = parseInt(totalCapacityEl.value) || 0;
            const stockInputs = document.querySelectorAll('input[name*="EventPrices"][name*="Stock"]');
            let totalStock = 0;
            stockInputs.forEach(input => {
                totalStock += parseInt(input.value) || 0;
            });
            // Update preview counters
            const totalDisplay = document.getElementById('totalCapacityDisplay');
            const maxDisplay = document.getElementById('maxCapacityDisplay');
            if (totalDisplay) totalDisplay.textContent = totalStock;
            if (maxDisplay) maxDisplay.textContent = totalCapacity;
            // Toggle banner color
            const validationDiv = document.querySelector('.bg-blue-500/10, .bg-green-500/10, .bg-red-500/10');
            if (validationDiv) {
                validationDiv.className = (totalStock === totalCapacity)
                    ? 'p-4 bg-green-500/10 border border-green-500/20 rounded-xl'
                    : 'p-4 bg-red-500/10 border border-red-500/20 rounded-xl';
            }
            // Show inline error (do not block submission; server validates as well)
            const hasTickets = stockInputs.length > 0;
            const capacityValid = hasTickets && totalStock === totalCapacity && totalCapacity > 0;
            if (errorText) {
                if (!capacityValid) errorText.classList.remove('hidden'); else errorText.classList.add('hidden');
            }
            // Keep submit enabled to allow server-side validation flow
        }

        // Form validation and submission
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('eventForm');
            const totalCapacityInput = document.getElementById('TotalCapacity');
            
            // Update capacity validation when total capacity changes
            totalCapacityInput.addEventListener('input', updateCapacityValidation);
            
            // Update capacity validation when any stock input changes
            document.addEventListener('input', function(e) {
                if (e.target.name && e.target.name.includes('EventPrices') && e.target.name.includes('Stock')) {
                    updateCapacityValidation();
                }
            });
            
            form.addEventListener('submit', function(e) {
                // Client-side validation
                const requiredFields = form.querySelectorAll('[required]');
                let isValid = true;
                
                requiredFields.forEach(field => {
                    if (!field.value.trim()) {
                        field.classList.add('border-red-500');
                        isValid = false;
                    } else {
                        field.classList.remove('border-red-500');
                    }
                });
                
                // Validate capacity matches ticket stocks
                const totalCapacity = parseInt(totalCapacityInput.value) || 0;
                const stockInputs = document.querySelectorAll('input[name*="EventPrices"][name*="Stock"]');
                let totalStock = 0;
                
                stockInputs.forEach(input => {
                    totalStock += parseInt(input.value) || 0;
                });
                
                if (totalStock !== totalCapacity) {
                    showNotification('Total capacity must match the sum of all ticket quantities', 'error');
                    isValid = false;
                }
                
                // Validate at least one ticket type
                if (stockInputs.length === 0) {
                    showNotification('Please add at least one ticket type', 'error');
                    isValid = false;
                }
                
                if (!isValid) {
                    e.preventDefault();
                    // reset loading state if blocked
                    setLoadingState(submitBtn, false);
                    isSubmitting = false;
                }
            });
            
            // Initialize capacity validation
            updateCapacityValidation();
        });

        // Additional functions
        function saveAsDraft() {
            showNotification('Draft functionality coming soon!', 'info');
        }

        function previewEvent() {
            showNotification('Preview functionality coming soon!', 'info');
        }

        // Notification system
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 px-6 py-4 rounded-xl shadow-lg backdrop-blur-xl border transition-all duration-300 transform translate-x-full ${
                type === 'success' ? 'bg-green-500/20 border-green-500/30 text-green-400' :
                type === 'error' ? 'bg-red-500/20 border-red-500/30 text-red-400' :
                'bg-blue-500/20 border-blue-500/30 text-blue-400'
            }`;
            notification.innerHTML = `
                <div class="flex items-center space-x-3">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>${message}</span>
                </div>
            `;
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);
            
            // Remove after 3 seconds
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => {
                    if (document.body.contains(notification)) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        // Form submission handlers
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('eventForm');
            const submitBtn = document.getElementById('submitBtn');
            const draftBtn = document.getElementById('draftBtn');

            // Handle form submission
            form.addEventListener('submit', function(e) {
                if (isSubmitting) {
                    e.preventDefault();
                    return false;
                }
                
                if (validateForm()) {
                    setLoadingState(submitBtn, true);
                    isSubmitting = true;
                } else {
                    e.preventDefault();
                    return false;
                }
            });

            // Handle draft button
            draftBtn.addEventListener('click', function(e) {
                if (isSubmitting) {
                    e.preventDefault();
                    return false;
                }
                
                setLoadingState(draftBtn, true);
                isSubmitting = true;
                
                // Add hidden field to indicate draft
                const draftInput = document.createElement('input');
                draftInput.type = 'hidden';
                draftInput.name = 'IsDraft';
                draftInput.value = 'true';
                form.appendChild(draftInput);
                
                // Submit form
                // For draft, allow mismatch but keep server-side checks; ensure main submit disabled state doesn't block draft
                form.submit();
            });
        });

        // Set loading state for buttons
        function setLoadingState(button, isLoading) {
            const textSpan = button.querySelector('.submit-text, .draft-text');
            const loadingSpan = button.querySelector('.submit-loading, .draft-loading');
            
            if (isLoading) {
                button.disabled = true;
                button.classList.add('opacity-50', 'cursor-not-allowed');
                if (textSpan) textSpan.classList.add('hidden');
                if (loadingSpan) loadingSpan.classList.remove('hidden');
            } else {
                button.disabled = false;
                button.classList.remove('opacity-50', 'cursor-not-allowed');
                if (textSpan) textSpan.classList.remove('hidden');
                if (loadingSpan) loadingSpan.classList.add('hidden');
            }
        }

        // Form validation
        function validateForm() {
            const requiredFields = [
                'Title',
                'Description', 
                'CategoryId',
                'VenueId',
                'EventDate',
                'StartTime',
                'EndTime',
                'TotalCapacity'
            ];

            let isValid = true;
            const errors = [];

            // Check required fields
            requiredFields.forEach(fieldName => {
                const field = document.querySelector(`[name="${fieldName}"]`);
                if (!field || !field.value.trim()) {
                    isValid = false;
                    errors.push(`${fieldName} is required`);
                }
            });

            // Check if at least one ticket type is added
            const ticketTypes = document.querySelectorAll('.ticket-type-item');
            if (ticketTypes.length === 0) {
                isValid = false;
                errors.push('At least one ticket type is required');
            }

            // Check ticket type validation
            ticketTypes.forEach((ticketType, index) => {
                const category = ticketType.querySelector(`[name="EventPrices[${index}].Category"]`);
                const price = ticketType.querySelector(`[name="EventPrices[${index}].Price"]`);
                const stock = ticketType.querySelector(`[name="EventPrices[${index}].Stock"]`);

                if (!category || !category.value.trim()) {
                    isValid = false;
                    errors.push(`Ticket type ${index + 1}: Category is required`);
                }
                if (!price || !price.value || parseFloat(price.value) < 0) {
                    isValid = false;
                    errors.push(`Ticket type ${index + 1}: Valid price is required`);
                }
                if (!stock || !stock.value || parseInt(stock.value) < 1) {
                    isValid = false;
                    errors.push(`Ticket type ${index + 1}: Stock must be at least 1`);
                }
            });

            if (!isValid) {
                showNotification('Please fix the following errors: ' + errors.join(', '), 'error');
            }

            return isValid;
        }

        // Override saveAsDraft function to use new handler
        function saveAsDraft() {
            // This will be handled by the event listener above
        }
    </script>
</div>
