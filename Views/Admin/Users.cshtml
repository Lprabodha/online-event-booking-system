@using online_event_booking_system.Models.View_Models
@model IEnumerable<UserWithRoleViewModel>

@{
    ViewData["Title"] = "Users Management";
    Layout = "_DashboardLayout";
}

<!-- Users Management Page -->
<div class="min-h-screen bg-dark-navy text-white pt-16">
    <!-- Main Content -->
    <div class="p-4 md:p-6">

            <!-- Page Header -->
            <div class="mb-8">
                <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Users Management</h1>
                <p class="text-gray-400">Manage all users, activate/deactivate accounts, and view user details</p>
            </div>

        <!-- Search and Filter Bar -->
        <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Search -->
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" id="userSearch" placeholder="Search users by name, email, or role..." 
                               class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <!-- Filter Buttons -->
                <div class="flex flex-wrap gap-2">
                    <button onclick="filterUsers('all')" class="user-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-gradient-to-r from-purple-500 to-teal-500 text-white text-sm">
                        All Users
                    </button>
                    <button onclick="filterUsers('active')" class="user-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Active
                    </button>
                    <button onclick="filterUsers('inactive')" class="user-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Inactive
                    </button>
                    <button onclick="filterUsers('customers')" class="user-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Customers
                    </button>
                    <button onclick="filterUsers('organizers')" class="user-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Organizers
                    </button>
                    <button onclick="filterUsers('admins')" class="user-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Admins
                    </button>
                </div>
            </div>
        </div>

        <!-- Users Table -->
        <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl overflow-hidden">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-white/5 border-b border-white/10">
                        <tr>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-gray-300">User</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-gray-300">Role</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-gray-300">Status</th>
                            <th class="px-6 py-4 text-left text-sm font-semibold text-gray-300">Address</th>
                            @* <th class="px-6 py-4 text-left text-sm font-semibold text-gray-300">NIC</th> *@
                            <th class="px-6 py-4 text-left text-sm font-semibold text-gray-300">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-white/10">
                        @foreach (var userWithRole in Model)
                        {
                            <tr class="user-row hover:bg-white/5 transition-colors" data-status="@(userWithRole.User.IsActive ? "active" : "inactive")" data-role="@userWithRole.Role.ToLower()">
                                <td class="px-6 py-4">
                                    <div class="flex items-center space-x-3">
                                        <div class="w-10 h-10 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                                            <span class="text-white font-semibold text-sm">@userWithRole.User.UserName?.Substring(0,2).ToUpper()</span>
                                        </div>
                                        <div>
                                            <p class="text-white font-medium">@userWithRole.User.FullName</p>
                                            <p class="text-gray-400 text-sm">@userWithRole.User.Email</p>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4">
                                    <span class="px-3 py-1 bg-blue-500/20 text-blue-400 rounded-full text-sm font-medium">@userWithRole.Role</span>
                                </td>
                                <td class="px-6 py-4">
                                    <span class="px-3 py-1 @(@userWithRole.User.IsActive ? "bg-green-500/20 border-green-500/30 text-green-400 hover:bg-green-500/30" : "bg-red-500/20 border-red-500/30 text-red-400 hover:bg-red-500/30") rounded-full text-sm font-medium">@(userWithRole.User.IsActive == true ? "Active" : "Deactive")</span>
                                </td>
                                <td class="px-6 py-4 text-gray-300">@userWithRole.User.Address</td>
                                @* <td class="px-6 py-4 text-gray-300">@userWithRole.User.NIC</td> *@
                                <td class="px-6 py-4">
                                    <div class="flex space-x-2">
                                        <button onclick="viewUser('@userWithRole.User.Id')" class="px-3 py-1 bg-blue-500/20 border border-blue-500/30 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all duration-200 text-sm">
                                            View
                                        </button>

                                        <form asp-controller="Admin" asp-action="ToggleStatus" method="post" style="display:inline;">
                                            <input type="hidden" name="id" value="@userWithRole.User.Id" />
                                            <button type="submit" class="px-3 py-1 @(@userWithRole.User.IsActive ? "bg-red-500/20 border-red-500/30 text-red-400 hover:bg-red-500/30" : "bg-green-500/20 border-green-500/30 text-green-400 hover:bg-green-500/30") border rounded-lg transition-all duration-200 text-sm">
                                                @(@userWithRole.User.IsActive ? "Deactivate" : "Activate")
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination -->
        <div class="flex items-center justify-between mt-8">
            <div class="text-gray-400 text-sm">
                Showing 1-4 of 124 users
            </div>
            <div class="flex space-x-2">
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                    Previous
                </button>
                <button class="px-3 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-lg text-sm">1</button>
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">2</button>
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">3</button>
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                    Next
                </button>
            </div>
        </div>
    </div>
</div>

<!-- User Details Modal -->
<div id="userModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-bold text-white">User Details</h3>
            <button onclick="closeUserModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <div id="userDetails" class="space-y-4">
            <!-- User details will be populated here -->
        </div>
    </div>
</div>

<script>
    // Sidebar toggle functionality
    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        sidebar.classList.toggle('-translate-x-full');
        overlay.classList.toggle('hidden');
        
        if (!sidebar.classList.contains('-translate-x-full')) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
    }
    
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const sidebar = document.getElementById('sidebar');
            if (!sidebar.classList.contains('-translate-x-full')) {
                toggleSidebar();
            }
        }
    });
    
    window.addEventListener('resize', function() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        if (window.innerWidth >= 768) {
            sidebar.classList.remove('-translate-x-full');
            overlay.classList.add('hidden');
            document.body.style.overflow = '';
        }
    });

    // User filtering functionality
    function filterUsers(filter) {
        const userRows = document.querySelectorAll('.user-row');
        const filterButtons = document.querySelectorAll('.user-filter');

        // Update filter button styles
        filterButtons.forEach(btn => {
            btn.classList.remove('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');
            btn.classList.add('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        });

        // Highlight active filter
        event.target.classList.remove('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        event.target.classList.add('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');

        // Filter users
        userRows.forEach(row => {
            const status = row.getAttribute('data-status');
            const role = row.getAttribute('data-role');
            
            let show = false;
            switch(filter) {
                case 'all':
                    show = true;
                    break;
                case 'active':
                    show = status === 'active';
                    break;
                case 'inactive':
                    show = status === 'inactive';
                    break;
                case 'customers':
                    show = role === 'customer';
                    break;
                case 'organizers':
                    show = role === 'organizer';
                    break;
                case 'admins':
                    show = role === 'admin';
                    break;
            }
            
            row.style.display = show ? 'table-row' : 'none';
        });
    }

    // Search functionality
    document.getElementById('userSearch').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const userRows = document.querySelectorAll('.user-row');

        userRows.forEach(row => {
            const name = row.querySelector('p').textContent.toLowerCase();
            const email = row.querySelector('p + p').textContent.toLowerCase();
            
            if (name.includes(searchTerm) || email.includes(searchTerm)) {
                row.style.display = 'table-row';
            } else {
                row.style.display = 'none';
            }
        });
    });

    function viewUser(userId) {
        fetch(`/Admin/GetUser?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('User not found');
                }
                return response.json();
            })
            .then(data => {
                const userDetailsDiv = document.getElementById('userDetails');
                userDetailsDiv.innerHTML = `
                    <div class="flex items-center space-x-4 mb-4">
                        <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-bold text-xl">${data.user.userName.substring(0, 2).toUpperCase()}</span>
                        </div>
                        <div>
                            <h4 class="text-xl font-semibold text-white">${data.user.fullName}</h4>
                            <p class="text-gray-400">${data.user.email}</p>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Role</p>
                            <p class="text-white font-medium">${data.role}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Status</p>
                            <p class="text-white font-medium">${data.user.isActive ? 'Active' : 'Inactive'}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Address</p>
                            <p class="text-white font-medium">${data.user.address}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">NIC</p>
                            <p class="text-white font-medium">${data.user.nic}</p>
                        </div>
                        </div>
                `;
                document.getElementById('userModal').classList.remove('hidden');
            })
            .catch(error => {
                console.error('Error fetching user data:', error);
                alert('Could not fetch user details.');
            });
    }

    // Function to close the modal
    function closeUserModal() {
        document.getElementById('userModal').classList.add('hidden');
    }

    // Toggle user status
    function toggleUserStatus(userId, currentStatus) {
        const action = currentStatus === 'active' ? 'deactivate' : 'activate';
        if (confirm(`Are you sure you want to ${action} this user?`)) {
            // Here you would make an API call to update the user status
            alert(`User ${action}d successfully!`);
            // Refresh the page or update the UI
            location.reload();
        }
    }

    // Close modal on escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeUserModal();
        }
    });
</script>
