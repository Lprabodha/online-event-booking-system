@{
    ViewData["Title"] = "Reports & Analytics";
    Layout = "_DashboardLayout";
}

<!-- Reports & Analytics Page -->
<div class="min-h-screen bg-dark-navy text-white pt-20">
    <!-- Main Content -->
    <div class="p-4 md:p-6">
        <!-- Page Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Reports & Analytics</h1>
            <p class="text-gray-400">Generate comprehensive reports and export data in various formats</p>
        </div>

        <!-- Tabs Navigation -->
        <div class="mb-8">
            <div class="border-b border-white/10">
                <nav class="-mb-px flex space-x-8">
                    <button id="usersTab" class="tab-button active py-2 px-1 border-b-2 border-purple-500 font-medium text-sm text-purple-400">
                        üë• User Reports
                    </button>
                    <button id="eventsTab" class="tab-button py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-400 hover:text-white hover:border-gray-300">
                        üìÖ Event Reports
                    </button>
                </nav>
            </div>
        </div>

        <!-- Users Tab Content -->
        <div id="usersContent" class="tab-content">
            <!-- User Filters -->
            <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
                <h3 class="text-xl font-bold text-white mb-6">User Report Filters</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    <div>
                        <label for="userDateFrom" class="block text-sm font-medium text-gray-300 mb-2">From Date</label>
                        <input type="date" id="userDateFrom" name="userDateFrom"
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label for="userDateTo" class="block text-sm font-medium text-gray-300 mb-2">To Date</label>
                        <input type="date" id="userDateTo" name="userDateTo"
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label for="userRole" class="block text-sm font-medium text-gray-300 mb-2">User Role</label>
                        <select id="userRole" name="userRole"
                                class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            <option value="">All Roles</option>
                            <option value="Admin">Admin</option>
                            <option value="Organizer">Organizer</option>
                            <option value="Customer">Customer</option>
                        </select>
                    </div>
                    
                    <div class="flex items-end">
                        <button onclick="filterUsers()" class="w-full px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200">
                            üîç Filter Users
                        </button>
                    </div>
                </div>
            </div>

            <!-- Users Table -->
            <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-bold text-white">Users Report</h3>
                    <div class="flex space-x-3">
                        <button onclick="downloadReport('users', 'pdf')" class="px-4 py-2 bg-red-500/20 border border-red-500/30 text-red-400 rounded-lg hover:bg-red-500/30 transition-all duration-200 font-medium text-sm">
                            üìÑ Download PDF
                        </button>
                        <button onclick="downloadReport('users', 'excel')" class="px-4 py-2 bg-green-500/20 border border-green-500/30 text-green-400 rounded-lg hover:bg-green-500/30 transition-all duration-200 font-medium text-sm">
                            üìä Download Excel
                        </button>
                    </div>
                </div>
                <div id="usersTableContainer">
                    <div class="text-center text-gray-400 py-8">
                        <p>Click "Filter Users" to load user data</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Events Tab Content -->
        <div id="eventsContent" class="tab-content hidden">
            <!-- Event Filters -->
            <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
                <h3 class="text-xl font-bold text-white mb-6">Event Report Filters</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
                    <div>
                        <label for="eventDateFrom" class="block text-sm font-medium text-gray-300 mb-2">From Date</label>
                        <input type="date" id="eventDateFrom" name="eventDateFrom"
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label for="eventDateTo" class="block text-sm font-medium text-gray-300 mb-2">To Date</label>
                        <input type="date" id="eventDateTo" name="eventDateTo"
                               class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    </div>
                    
                    <div>
                        <label for="eventCategory" class="block text-sm font-medium text-gray-300 mb-2">Category</label>
                        <select id="eventCategory" name="eventCategory"
                                class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            <option value="">All Categories</option>
                            @if (ViewBag.Categories != null)
                            {
                                @foreach (var category in ViewBag.Categories)
                                {
                                    <option value="@category.Name">@category.Name</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <div>
                        <label for="eventOrganizer" class="block text-sm font-medium text-gray-300 mb-2">Organizer</label>
                        <select id="eventOrganizer" name="eventOrganizer"
                                class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                            <option value="">All Organizers</option>
                            @if (ViewBag.Organizers != null)
                            {
                                @foreach (var organizer in ViewBag.Organizers)
                                {
                                    <option value="@organizer.Id">@organizer.FullName</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <div class="flex items-end">
                        <button onclick="filterEvents()" class="w-full px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200">
                            üîç Filter Events
                        </button>
                    </div>
                </div>
            </div>

            <!-- Events Table -->
            <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-bold text-white">Events Report</h3>
                    <div class="flex space-x-3">
                        <button onclick="downloadReport('events', 'pdf')" class="px-4 py-2 bg-red-500/20 border border-red-500/30 text-red-400 rounded-lg hover:bg-red-500/30 transition-all duration-200 font-medium text-sm">
                            üìÑ Download PDF
                        </button>
                        <button onclick="downloadReport('events', 'excel')" class="px-4 py-2 bg-green-500/20 border border-green-500/30 text-green-400 rounded-lg hover:bg-green-500/30 transition-all duration-200 font-medium text-sm">
                            üìä Download Excel
                        </button>
                    </div>
                </div>
                <div id="eventsTableContainer">
                    <div class="text-center text-gray-400 py-8">
                        <p>Click "Filter Events" to load event data</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Tab functionality
    document.addEventListener('DOMContentLoaded', function() {
        const usersTab = document.getElementById('usersTab');
        const eventsTab = document.getElementById('eventsTab');
        const usersContent = document.getElementById('usersContent');
        const eventsContent = document.getElementById('eventsContent');

        usersTab.addEventListener('click', function() {
            // Update tab appearance
            usersTab.classList.add('active', 'border-purple-500', 'text-purple-400');
            usersTab.classList.remove('border-transparent', 'text-gray-400');
            eventsTab.classList.remove('active', 'border-purple-500', 'text-purple-400');
            eventsTab.classList.add('border-transparent', 'text-gray-400');

            // Show/hide content
            usersContent.classList.remove('hidden');
            eventsContent.classList.add('hidden');
        });

        eventsTab.addEventListener('click', function() {
            // Update tab appearance
            eventsTab.classList.add('active', 'border-purple-500', 'text-purple-400');
            eventsTab.classList.remove('border-transparent', 'text-gray-400');
            usersTab.classList.remove('active', 'border-purple-500', 'text-purple-400');
            usersTab.classList.add('border-transparent', 'text-gray-400');

            // Show/hide content
            eventsContent.classList.remove('hidden');
            usersContent.classList.add('hidden');
        });

        // Set default date range (last 30 days)
        const today = new Date();
        const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
        
        document.getElementById('userDateTo').value = today.toISOString().split('T')[0];
        document.getElementById('userDateFrom').value = thirtyDaysAgo.toISOString().split('T')[0];
        document.getElementById('eventDateTo').value = today.toISOString().split('T')[0];
        document.getElementById('eventDateFrom').value = thirtyDaysAgo.toISOString().split('T')[0];
    });

    // Filter users function
    async function filterUsers() {
        const dateFrom = document.getElementById('userDateFrom').value;
        const dateTo = document.getElementById('userDateTo').value;
        const role = document.getElementById('userRole').value;
        
        console.log('Filtering users with:', { dateFrom, dateTo, role });
        
        const container = document.getElementById('usersTableContainer');
        container.innerHTML = '<div class="text-center text-gray-400 py-8"><p>Loading users...</p></div>';

        const url = `/Admin/Reports/Users?dateFrom=${dateFrom}&dateTo=${dateTo}&role=${encodeURIComponent(role)}`;
        console.log('Requesting URL:', url);

        try {
            const response = await fetch(url);
            console.log('Response status:', response.status);
            console.log('Response ok:', response.ok);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const html = await response.text();
            console.log('Response HTML length:', html.length);
            container.innerHTML = html;
        } catch (error) {
            console.error('Error loading users:', error);
            container.innerHTML = '<div class="text-center text-red-400 py-8"><p>Error loading users data: ' + error.message + '</p></div>';
        }
    }

    // Filter events function
    async function filterEvents() {
        const dateFrom = document.getElementById('eventDateFrom').value;
        const dateTo = document.getElementById('eventDateTo').value;
        const category = document.getElementById('eventCategory').value;
        const organizer = document.getElementById('eventOrganizer').value;
        
        const container = document.getElementById('eventsTableContainer');
        container.innerHTML = '<div class="text-center text-gray-400 py-8"><p>Loading events...</p></div>';

        try {
            const response = await fetch(`/Admin/Reports/Events?dateFrom=${dateFrom}&dateTo=${dateTo}&category=${encodeURIComponent(category)}&organizer=${encodeURIComponent(organizer)}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const html = await response.text();
            container.innerHTML = html;
        } catch (error) {
            console.error('Error loading events:', error);
            container.innerHTML = '<div class="text-center text-red-400 py-8"><p>Error loading events data: ' + error.message + '</p></div>';
        }
    }

    // Download report function
    async function downloadReport(reportType, format) {
        let dateFrom, dateTo, category = '', organizer = '', role = '';

        if (reportType === 'users') {
            dateFrom = document.getElementById('userDateFrom').value;
            dateTo = document.getElementById('userDateTo').value;
            role = document.getElementById('userRole').value;
        } else if (reportType === 'events') {
            dateFrom = document.getElementById('eventDateFrom').value;
            dateTo = document.getElementById('eventDateTo').value;
            category = document.getElementById('eventCategory').value;
            organizer = document.getElementById('eventOrganizer').value;
        }

        // Show loading state
        const button = event.target;
        const originalText = button.textContent;
        button.textContent = 'Generating...';
        button.disabled = true;

        try {
            const formData = new FormData();
            formData.append('reportType', reportType);
            formData.append('format', format);
            formData.append('dateFrom', dateFrom);
            formData.append('dateTo', dateTo);
            formData.append('category', category);
            formData.append('organizer', organizer);
            formData.append('role', role);

            const response = await fetch('/Admin/Reports/Download', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `${reportType}_report_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.${format}`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } else {
                alert('Error generating report. Please try again.');
            }
        } catch (error) {
            alert('Error generating report. Please try again.');
        } finally {
            // Reset button
            button.textContent = originalText;
            button.disabled = false;
        }
    }
</script>