@model IEnumerable<online_event_booking_system.Data.Entities.Venue>
@using online_event_booking_system.Data.Entities

@{
    ViewData["Title"] = "Venues Management";
    Layout = "_DashboardLayout";
}

<!-- Venues Management Page -->
<div class="min-h-screen bg-dark-navy text-white pt-20">
    <!-- Main Content -->
    <div class="p-4 md:p-6">

            <!-- Page Header -->
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8">
                <div>
                    <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Venues Management</h1>
                    <p class="text-gray-400">Manage event venues, create new venues, and edit existing ones</p>
                </div>
                <button onclick="openCreateVenueModal()" class="mt-4 lg:mt-0 px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200 transform hover:scale-105">
                    <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Create Venue
                </button>
            </div>

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-xl text-green-400">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    @TempData["SuccessMessage"]
                </div>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-400">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    @TempData["ErrorMessage"]
                </div>
            </div>
        }

        <!-- Search and Filter Bar -->
        <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Search -->
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" id="venueSearch" placeholder="Search venues by name, location, or capacity..." 
                               class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <!-- Filter Buttons -->
                <div class="flex flex-wrap gap-2">
                    <button onclick="filterVenues('all')" class="venue-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-gradient-to-r from-purple-500 to-teal-500 text-white text-sm">
                        All Venues
                    </button>
                    <button onclick="filterVenues('indoor')" class="venue-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Indoor
                    </button>
                    <button onclick="filterVenues('outdoor')" class="venue-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Outdoor
                    </button>
                    <button onclick="filterVenues('large')" class="venue-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Large
                    </button>
                    <button onclick="filterVenues('small')" class="venue-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Small
                    </button>
                </div>
            </div>
        </div>

        <!-- Venues Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8">
            @if (Model != null)
            {
                @foreach (var venue in Model)
                {
                    <div class="venue-card bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl overflow-hidden hover:bg-white/10 transition-all duration-300 group">
                        <div class="h-48 relative">
                            @if (!string.IsNullOrEmpty(venue.Image))
                            {
                                <img src="@venue.Image" alt="@venue.Name" class="w-full h-full object-cover">
                            }
                            else
                            {
                                <div class="w-full h-full bg-gradient-to-br from-purple-500/20 to-teal-500/20 flex items-center justify-center text-gray-500">
                                    No Image Available
                                </div>
                            }
                            <div class="absolute top-3 right-3">
                                <span class="px-2 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs font-medium">
                                    @venue.Location
                                </span>
                            </div>
                            <div class="absolute bottom-3 left-3">
                                <span class="px-2 py-1 @(venue.IsActive ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400") rounded-full text-xs font-medium">
                                    @(venue.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                        <div class="p-6">
                            <h3 class="text-xl font-bold text-white mb-2">@venue.Name</h3>
                            <p class="text-gray-400 text-sm mb-4">@venue.Description</p>

                            <div class="space-y-2 mb-4">
                                <div class="flex items-center space-x-2 text-sm">
                                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                    </svg>
                                    <span class="text-gray-300">@venue.Location</span>
                                </div>
                                <div class="flex items-center space-x-2 text-sm">
                                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                    </svg>
                                    <span class="text-gray-300">@venue.Capacity Capacity</span>
                                </div>
                            </div>

                            <div class="flex space-x-2">
                                <button onclick="viewVenue('@venue.Id')" class="flex-1 px-4 py-2 bg-blue-500/20 border border-blue-500/30 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all duration-200 font-medium text-sm">
                                    View
                                </button>
                                <button onclick="editVenue('@venue.Id')" class="flex-1 px-4 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 font-medium text-sm">
                                    Edit
                                </button>
                                <button onclick="deleteVenue('@venue.Id')" class="flex-1 px-4 py-2 bg-red-500/20 border border-red-500/30 text-red-400 rounded-lg hover:bg-red-500/30 transition-all duration-200 font-medium text-sm">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <!-- Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <div class="flex items-center justify-between mt-8">
                <div class="text-gray-400 text-sm">
                    Showing @ViewBag.StartItem-@ViewBag.EndItem of @ViewBag.TotalItems venues
                </div>
                <div class="flex space-x-2">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a href="@Url.Action("Venues", new { page = ViewBag.CurrentPage - 1, pageSize = ViewBag.PageSize })" 
                           class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                            Previous
                        </a>
                    }
                    else
                    {
                        <span class="px-3 py-2 bg-white/5 border border-white/10 text-gray-500 rounded-lg text-sm cursor-not-allowed">
                            Previous
                        </span>
                    }

                    @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                    {
                        if (i == ViewBag.CurrentPage)
                        {
                            <span class="px-3 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-lg text-sm">@i</span>
                        }
                        else
                        {
                            <a href="@Url.Action("Venues", new { page = i, pageSize = ViewBag.PageSize })" 
                               class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">@i</a>
                        }
                    }

                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a href="@Url.Action("Venues", new { page = ViewBag.CurrentPage + 1, pageSize = ViewBag.PageSize })" 
                           class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                            Next
                        </a>
                    }
                    else
                    {
                        <span class="px-3 py-2 bg-white/5 border border-white/10 text-gray-500 rounded-lg text-sm cursor-not-allowed">
                            Next
                        </span>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Create Venue Modal -->
<div id="venueModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 id="modalTitle" class="text-xl font-bold text-white">Create New Venue</h3>
            <button onclick="closeVenueModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <!-- Success/Error Messages -->
        <div id="messageContainer" class="mb-6 hidden">
            <div id="successMessage" class="bg-green-500/20 border border-green-500/30 text-green-400 px-4 py-3 rounded-xl mb-4 hidden">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span id="successMessageText"></span>
                </div>
            </div>
            <div id="errorMessage" class="bg-red-500/20 border border-red-500/30 text-red-400 px-4 py-3 rounded-xl mb-4 hidden">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    <span id="errorMessageText"></span>
                </div>
            </div>
        </div>

        <form id="venueForm" asp-action="CreateVenue" asp-controller="Admin" method="post" class="space-y-6">
            <input type="hidden" id="venueId" name="Id" value="">
            @Html.AntiForgeryToken()

            <div>
                <label for="name" class="block text-sm font-medium text-gray-300 mb-2">Venue Name *</label>
                <input type="text" id="name" name="Name" required minlength="2" maxlength="200"
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                <div class="text-red-400 text-sm mt-1 hidden" id="nameError"></div>
            </div>

            <div>
                <label for="location" class="block text-sm font-medium text-gray-300 mb-2">Location *</label>
                <input type="text" id="location" name="Location"  required minlength="5" maxlength="500"
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                <div class="text-red-400 text-sm mt-1 hidden" id="locationError"></div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="capacity" class="block text-sm font-medium text-gray-300 mb-2">Capacity *</label>
                    <input type="number" id="capacity" name="Capacity" required min="1" max="100000" placeholder="Enter capacity (e.g., 100)"
                           class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <div class="text-red-400 text-sm mt-1 hidden" id="capacityError"></div>
                </div>

                <div>
                    <label for="contactInfo" class="block text-sm font-medium text-gray-300 mb-2">Contact Info</label>
                    <input type="text" id="contactInfo" name="ContactInfo"  maxlength="500"
                           class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                    <div class="text-red-400 text-sm mt-1 hidden" id="contactInfoError"></div>
                </div>
            </div>

            <div>
                <label for="description" class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                <textarea id="description" name="Description" rows="3" maxlength="1000"
                          class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"></textarea>
                <div class="text-red-400 text-sm mt-1 hidden" id="descriptionError"></div>
            </div>

            <div>
                <label for="image" class="block text-sm font-medium text-gray-300 mb-2">Image URL</label>
                <input type="url" id="image" name="Image" value=""
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                <div class="text-red-400 text-sm mt-1 hidden" id="imageError"></div>
            </div>

            <div class="flex justify-end space-x-4">
                <button type="button" onclick="closeVenueModal()" class="px-6 py-3 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200 font-medium">
                    Cancel
                </button>
                <button type="submit" id="submitButton" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200">
                    <span id="submitButtonText">Create Venue</span>
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Venue Details Modal -->
<div id="venueModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-bold text-white">Venue Details</h3>
            <button onclick="closeVenueModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <div id="venueDetails" class="space-y-4">
            <!-- Venue details will be populated here -->
        </div>
    </div>
</div>

<script>
    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        sidebar.classList.toggle('-translate-x-full');
        overlay.classList.toggle('hidden');
        
        if (!sidebar.classList.contains('-translate-x-full')) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
    }
    
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const sidebar = document.getElementById('sidebar');
            if (!sidebar.classList.contains('-translate-x-full')) {
                toggleSidebar();
            }
        }
    });
    
    window.addEventListener('resize', function() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        if (window.innerWidth >= 768) {
            sidebar.classList.remove('-translate-x-full');
            overlay.classList.add('hidden');
            document.body.style.overflow = '';
        }
    });

    function filterVenues(filter) {
        const venueCards = document.querySelectorAll('.venue-card');
        const filterButtons = document.querySelectorAll('.venue-filter');

        filterButtons.forEach(btn => {
            btn.classList.remove('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');
            btn.classList.add('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        });

        event.target.classList.remove('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        event.target.classList.add('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');

        venueCards.forEach(card => {
            const type = card.getAttribute('data-type');
            const capacity = parseInt(card.getAttribute('data-capacity'));
            
            let show = false;
            switch(filter) {
                case 'all':
                    show = true;
                    break;
                case 'indoor':
                    show = type === 'indoor';
                    break;
                case 'outdoor':
                    show = type === 'outdoor';
                    break;
                case 'large':
                    show = capacity >= 500;
                    break;
                case 'small':
                    show = capacity < 100;
                    break;
            }
            
            card.style.display = show ? 'block' : 'none';
        });
    }

    document.getElementById('venueSearch').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const venueCards = document.querySelectorAll('.venue-card');

        venueCards.forEach(card => {
            const title = card.querySelector('h3').textContent.toLowerCase();
            const description = card.querySelector('p').textContent.toLowerCase();
            
            if (title.includes(searchTerm) || description.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    });

    async function viewVenue(venueId) {
        try {
            const response = await fetch(`/api/Venues/${venueId}`);
            if (!response.ok) throw new Error('Venue not found');
            const result = await response.json();
            const venue = result.data || result;

            document.getElementById('venueDetails').innerHTML = `
                <div class="space-y-4">
                    <div>
                        <label class="text-gray-400 text-sm">Venue Name</label>
                        <p class="text-white text-lg font-semibold">${venue.name}</p>
                    </div>
                    <div>
                        <label class="text-gray-400 text-sm">Description</label>
                        <p class="text-white">${venue.description || 'No description available'}</p>
                    </div>
                    <div>
                        <label class="text-gray-400 text-sm">Location</label>
                        <p class="text-white">${venue.location}</p>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="text-gray-400 text-sm">Capacity</label>
                            <p class="text-white">${venue.capacity} people</p>
                        </div>
                        <div>
                            <label class="text-gray-400 text-sm">Status</label>
                            <p class="text-white">${venue.isActive ? 'Active' : 'Inactive'}</p>
                        </div>
                    </div>
                    <div>
                        <label class="text-gray-400 text-sm">Contact Information</label>
                        <p class="text-white">${venue.contactInfo || 'No contact information available'}</p>
                    </div>
                    ${venue.image ? `
                    <div>
                        <label class="text-gray-400 text-sm">Image</label>
                        <img src="${venue.image}" alt="${venue.name}" class="w-full h-48 object-cover rounded-lg mt-2">
                    </div>
                    ` : ''}
                </div>
            `;
            document.getElementById('venueModal').classList.remove('hidden');
        } catch (error) {
            alert('Failed to load venue details. Please try again.');
        }
    }
</script>
<script>
    function openVenueModal(isEdit = false) {
        document.getElementById('venueModal').classList.remove('hidden');
        document.getElementById('modalTitle').textContent = isEdit ? 'Edit Venue' : 'Create New Venue';
        document.getElementById('submitButtonText').textContent = isEdit ? 'Update Venue' : 'Create Venue';
    }

    function closeVenueModal() {
        document.getElementById('venueModal').classList.add('hidden');
        document.getElementById('venueForm').reset();
        document.getElementById('venueId').value = '';
        document.getElementById('venueId').removeAttribute('name');
        document.getElementById('messageContainer').classList.add('hidden');
        clearAllErrors();
    }

    function clearAllErrors() {
        const errorElements = document.querySelectorAll('[id$="Error"]');
        const inputElements = document.querySelectorAll('input, textarea');
        
        errorElements.forEach(element => {
            element.classList.add('hidden');
            element.textContent = '';
        });
        
        inputElements.forEach(element => {
            element.classList.remove('border-red-500');
        });
    }

    function showFieldError(fieldName, message) {
        const errorElement = document.getElementById(fieldName + 'Error');
        const inputElement = document.getElementById(fieldName);
        
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
        inputElement.classList.add('border-red-500');
    }

    function validateForm() {
        let isValid = true;
        clearAllErrors();

        const name = document.getElementById('name').value.trim();
        if (!name) {
            showFieldError('name', 'Venue name is required');
            isValid = false;
        } else if (name.length < 2 || name.length > 200) {
            showFieldError('name', 'Venue name must be between 2 and 200 characters');
            isValid = false;
        }

        const location = document.getElementById('location').value.trim();
        if (!location) {
            showFieldError('location', 'Location is required');
            isValid = false;
        } else if (location.length < 5 || location.length > 500) {
            showFieldError('location', 'Location must be between 5 and 500 characters');
            isValid = false;
        }

        const capacityValue = document.getElementById('capacity').value.trim();
        if (!capacityValue) {
            showFieldError('capacity', 'Capacity is required');
            isValid = false;
        } else {
            const capacity = parseInt(capacityValue);
            if (isNaN(capacity)) {
                showFieldError('capacity', 'Capacity must be a valid number');
                isValid = false;
            } else if (capacity < 1 || capacity > 100000) {
                showFieldError('capacity', 'Capacity must be between 1 and 100,000');
                isValid = false;
            }
        }

        const description = document.getElementById('description').value.trim();
        if (description && description.length > 1000) {
            showFieldError('description', 'Description cannot exceed 1000 characters');
            isValid = false;
        }

        const contactInfo = document.getElementById('contactInfo').value.trim();
        if (contactInfo && contactInfo.length > 500) {
            showFieldError('contactInfo', 'Contact information cannot exceed 500 characters');
            isValid = false;
        }

        const image = document.getElementById('image').value.trim();
        if (image) {
            try {
                new URL(image);
            } catch {
                showFieldError('image', 'Please enter a valid URL for the image');
                isValid = false;
            }
        }

        return isValid;
    }

    function openCreateVenueModal() {
        closeVenueModal();
        document.getElementById('venueForm').action = '/admin/venues/create';
        document.getElementById('venueId').value = '';
        document.getElementById('venueId').removeAttribute('name');
        document.getElementById('name').value = '';
        document.getElementById('location').value = '';
        document.getElementById('capacity').value = '';
        document.getElementById('description').value = '';
        document.getElementById('image').value = '';
        document.getElementById('contactInfo').value = '';
        document.getElementById('submitButtonText').textContent = 'Create Venue';
        openVenueModal(false);
    }

    async function editVenue(id) {
        try {
            const response = await fetch(`/api/Venues/${id}`);
            if (!response.ok) throw new Error('Venue not found');
            const result = await response.json();
            const venue = result.data || result;

            document.getElementById('venueForm').action = `/admin/venues/edit/${id}`;
            document.getElementById('venueId').value = venue.id;
            document.getElementById('venueId').setAttribute('name', 'Id');
            document.getElementById('name').value = venue.name || '';
            document.getElementById('location').value = venue.location || '';
            document.getElementById('capacity').value = venue.capacity || '';
            document.getElementById('description').value = venue.description || '';
            document.getElementById('image').value = venue.image || '';
            document.getElementById('contactInfo').value = venue.contactInfo || '';
            document.getElementById('submitButtonText').textContent = 'Update Venue';

            openVenueModal(true);
        } catch (error) {
            alert('Failed to load venue data. Please try again.');
        }
    }

    function deleteVenue(id) {
        if (!confirm('Are you sure you want to delete this venue?')) return;

        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/admin/venues/delete/${id}`;
        
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const tokenInput = document.createElement('input');
        tokenInput.type = 'hidden';
        tokenInput.name = '__RequestVerificationToken';
        tokenInput.value = token;
        form.appendChild(tokenInput);
        
        document.body.appendChild(form);
        form.submit();
    }

    document.getElementById('venueForm').addEventListener('submit', function(e) {
        if (!validateForm()) {
            e.preventDefault();
        }
    });

</script>
