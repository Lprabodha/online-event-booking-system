@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Events Management";
    Layout = "_DashboardLayout";
}

<!-- Events Management Page -->
<div class="min-h-screen bg-dark-navy text-white pt-16">
    <!-- Main Content -->
    <div class="p-4 md:p-6">

            <!-- Page Header -->
            <div class="mb-8">
                <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Events Management</h1>
                <p class="text-gray-400">View and manage all events across the platform</p>
            </div>

        <!-- Search and Filter Bar -->
        <form method="get" class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Search -->
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" name="search" placeholder="Search events by name, organizer, or venue..." 
                               value="@ViewBag.SearchTerm"
                               class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <!-- Filter Buttons -->
                <div class="flex flex-wrap gap-2">
                    <button type="submit" name="status" value="all" class="event-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 @(ViewBag.SelectedStatus == "all" || ViewBag.SelectedStatus == null ? "bg-gradient-to-r from-purple-500 to-teal-500 text-white" : "text-gray-300 hover:text-white hover:bg-white/10") text-sm">
                        All Events
                    </button>
                    <button type="submit" name="status" value="upcoming" class="event-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 @(ViewBag.SelectedStatus == "upcoming" ? "bg-gradient-to-r from-purple-500 to-teal-500 text-white" : "text-gray-300 hover:text-white hover:bg-white/10") text-sm">
                        Upcoming
                    </button>
                    <button type="submit" name="status" value="live" class="event-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 @(ViewBag.SelectedStatus == "live" ? "bg-gradient-to-r from-purple-500 to-teal-500 text-white" : "text-gray-300 hover:text-white hover:bg-white/10") text-sm">
                        Live
                    </button>
                    <button type="submit" name="status" value="ended" class="event-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 @(ViewBag.SelectedStatus == "ended" ? "bg-gradient-to-r from-purple-500 to-teal-500 text-white" : "text-gray-300 hover:text-white hover:bg-white/10") text-sm">
                        Ended
                    </button>
                    <button type="submit" name="status" value="cancelled" class="event-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 @(ViewBag.SelectedStatus == "cancelled" ? "bg-gradient-to-r from-purple-500 to-teal-500 text-white" : "text-gray-300 hover:text-white hover:bg-white/10") text-sm">
                        Cancelled
                    </button>
                </div>
            </div>
        </form>

        <!-- Events Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8">
            @if (Model != null && Model.Any())
            {
                @foreach (var eventItem in Model)
                {
                    var eventEntity = eventItem.Event;
                    var status = eventItem.CalculatedStatus;
                    var statusColors = status switch
                    {
                        "upcoming" => new { bg = "from-green-500/20 to-emerald-500/20", badge = "bg-green-500/20 text-green-400", category = "bg-green-500/20 text-green-400" },
                        "live" => new { bg = "from-red-500/20 to-orange-500/20", badge = "bg-red-500/20 text-red-400", category = "bg-red-500/20 text-red-400" },
                        "ended" => new { bg = "from-gray-500/20 to-slate-500/20", badge = "bg-gray-500/20 text-gray-400", category = "bg-gray-500/20 text-gray-400" },
                        "cancelled" => new { bg = "from-red-500/20 to-pink-500/20", badge = "bg-red-500/20 text-red-400", category = "bg-red-500/20 text-red-400" },
                        _ => new { bg = "from-blue-500/20 to-cyan-500/20", badge = "bg-blue-500/20 text-blue-400", category = "bg-blue-500/20 text-blue-400" }
                    };
                    
                    var minPrice = 0m;
                    if (eventEntity.Prices != null && eventEntity.Prices.Count > 0)
                    {
                        minPrice = eventEntity.Prices[0].Price;
                        for (int i = 1; i < eventEntity.Prices.Count; i++)
                        {
                            if (eventEntity.Prices[i].Price < minPrice)
                            {
                                minPrice = eventEntity.Prices[i].Price;
                            }
                        }
                    }
                    var ticketsSold = 0;
                    if (eventEntity.Bookings != null)
                    {
                        foreach (var booking in eventEntity.Bookings)
                        {
                            if (booking.Status == "Confirmed")
                            {
                                ticketsSold++;
                            }
                        }
                    }
                    
                    <div class="event-card bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl overflow-hidden hover:bg-white/10 transition-all duration-300 group" data-status="@status">
                        <div class="h-48 bg-gradient-to-br @statusColors.bg relative">
                            @if (!string.IsNullOrEmpty(eventEntity.Image))
                            {
                                <img src="@eventEntity.Image" alt="@eventEntity.Title" class="w-full h-full object-cover" />
                            }
                            <div class="absolute top-3 right-3">
                                <span class="px-2 py-1 @statusColors.badge rounded-full text-xs font-medium capitalize">@status</span>
                            </div>
                            <div class="absolute bottom-3 left-3">
                                <span class="px-2 py-1 @statusColors.category rounded-full text-xs font-medium">@(eventEntity.Category?.Name ?? "General")</span>
                            </div>
                        </div>
                        <div class="p-6">
                            <h3 class="text-xl font-bold text-white mb-2 line-clamp-2">@eventEntity.Title</h3>
                            <p class="text-gray-400 text-sm mb-4 line-clamp-3">@eventEntity.Description</p>
                            
                            <div class="space-y-2 mb-4">
                                <div class="flex items-center space-x-2 text-sm">
                                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    <span class="text-gray-300">@eventEntity.EventDate.ToString("MMM dd, yyyy")</span>
                                </div>
                                <div class="flex items-center space-x-2 text-sm">
                                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <span class="text-gray-300">@eventEntity.EventTime.ToString("h:mm tt")</span>
                                </div>
                                <div class="flex items-center space-x-2 text-sm">
                                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                    </svg>
                                    <span class="text-gray-300">@(eventEntity.Venue?.Name ?? "TBD")</span>
                                </div>
                                <div class="flex items-center space-x-2 text-sm">
                                    <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                    </svg>
                                    <span class="text-gray-300">@(eventEntity.Organizer?.FullName ?? "Unknown")</span>
                                </div>
                            </div>
                            
                            <div class="flex items-center justify-between mb-4">
                                <div>
                                    <p class="text-2xl font-bold text-white">LKR @minPrice.ToString("F2")</p>
                                    <p class="text-gray-400 text-xs">per ticket</p>
                                </div>
                                <div class="text-right">
                                    <p class="text-white font-semibold">@ticketsSold/@eventEntity.TotalCapacity</p>
                                    <p class="text-gray-400 text-xs">tickets sold</p>
                                </div>
                            </div>
                            
                            <div class="flex space-x-2">
                                <button onclick="viewEvent('@eventEntity.Id')" class="flex-1 px-4 py-2 bg-blue-500/20 border border-blue-500/30 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all duration-200 font-medium text-sm">
                                    View Details
                                </button>
                                <button onclick="editEvent('@eventEntity.Id')" class="flex-1 px-4 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 font-medium text-sm">
                                    Edit
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-span-full text-center py-16">
                    <div class="max-w-md mx-auto">
                        <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                        </svg>
                        <h3 class="text-2xl font-bold text-white mb-4">No Events Found</h3>
                        <p class="text-gray-400 mb-6">
                            @if (!string.IsNullOrEmpty(ViewBag.SearchTerm as string))
                            {
                                <span>No events match your search for "<span class="text-purple-400">@ViewBag.SearchTerm</span>"</span>
                            }
                            else
                            {
                                <span>There are no events in the system yet.</span>
                            }
                        </p>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <div class="flex items-center justify-between">
                <div class="text-gray-400 text-sm">
                    Showing @ViewBag.StartItem-@ViewBag.EndItem of @ViewBag.TotalItems events
                </div>
                <div class="flex space-x-2">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a href="?page=@(ViewBag.CurrentPage - 1)&search=@ViewBag.SearchTerm&status=@ViewBag.SelectedStatus" class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                            Previous
                        </a>
                    }
                    
                    @for (int i = Math.Max(1, ViewBag.CurrentPage - 2); i <= Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2); i++)
                    {
                        if (i == ViewBag.CurrentPage)
                        {
                            <span class="px-3 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-lg text-sm">@i</span>
                        }
                        else
                        {
                            <a href="?page=@i&search=@ViewBag.SearchTerm&status=@ViewBag.SelectedStatus" class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">@i</a>
                        }
                    }
                    
                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a href="?page=@(ViewBag.CurrentPage + 1)&search=@ViewBag.SearchTerm&status=@ViewBag.SelectedStatus" class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                            Next
                        </a>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Event Details Modal -->
<div id="eventModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-bold text-white">Event Details</h3>
            <button onclick="closeEventModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <div id="eventDetails" class="space-y-6">
            <!-- Event details will be populated here -->
        </div>
    </div>
</div>

<script>
    // View event details
    function viewEvent(eventId) {
        // Redirect to event details page
        window.location.href = `/events/${eventId}`;
    }

    // Edit event
    function editEvent(eventId) {
        // Redirect to edit page
        window.location.href = `/admin/events/${eventId}/edit`;
    }

    // Close event modal
    function closeEventModal() {
        document.getElementById('eventModal').classList.add('hidden');
    }

    // Close modal on escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeEventModal();
        }
    });

    // Auto-submit form on search input change (with debounce)
    let searchTimeout;
    const searchInput = document.querySelector('input[name="search"]');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                this.form.submit();
            }, 500);
        });
    }
</script>
