@using online_event_booking_system.Models.View_Models
@model IEnumerable<UserWithRoleViewModel>

@{
    ViewData["Title"] = "Organizers Management";
    Layout = "_DashboardLayout";
}

<!-- Organizers Management Page -->
<div class="min-h-screen bg-dark-navy text-white pt-20">
        <!-- Main Content -->
    <div class="p-4 md:p-6">

            <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="mb-6 p-4 bg-green-500/20 border border-green-500/30 rounded-xl text-green-400">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    @TempData["SuccessMessage"]
                </div>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-400">
                <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    @TempData["ErrorMessage"]
                </div>
            </div>
        }

        @if (TempData["ValidationErrors"] != null)
        {
            <div class="mb-6 p-4 bg-red-500/20 border border-red-500/30 rounded-xl text-red-400">
                <div class="flex items-start">
                    <svg class="w-5 h-5 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    <div>
                        <h4 class="font-medium mb-2">Please fix the following errors:</h4>
                        <ul class="list-disc list-inside space-y-1">
                            @foreach (var error in (List<string>)TempData["ValidationErrors"])
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }

        <!-- Page Header -->
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8">
                <div>
                    <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Organizers Management</h1>
                    <p class="text-gray-400">Manage event organizers, create new organizers, and control access</p>
                </div>
                <button onclick="openCreateOrganizerModal()" class="mt-4 lg:mt-0 px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200 transform hover:scale-105">
                    <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Create Organizer
                </button>
            </div>

        <!-- Search and Filter Bar -->
        <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Search -->
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" id="organizerSearch" placeholder="Search organizers by name, email, or organization..." 
                               class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <!-- Filter Buttons -->
                <div class="flex flex-wrap gap-2">
                    <button onclick="filterOrganizers('all')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-gradient-to-r from-purple-500 to-teal-500 text-white text-sm">
                        All Organizers
                    </button>
                    <button onclick="filterOrganizers('active')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Active
                    </button>
                    <button onclick="filterOrganizers('inactive')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Inactive
                    </button>
                </div>
            </div>
        </div>

        <!-- Organizers Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8">
            @foreach (var userWithRole in Model)
            {
                <div class="organizer-card bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition-all duration-300"
                     data-status="@(userWithRole.User.IsActive ? "active" : "inactive")"
                     data-verified="true">

                    <div class="flex items-center space-x-4 mb-4">
                        <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-bold text-xl">
                                @(userWithRole.User.UserName != null && userWithRole.User.UserName.Length >= 2 ? userWithRole.User.UserName.Substring(0, 2).ToUpper() : "N/A")
                            </span>
                        </div>
                        <div class="flex-1">
                            <h3 class="text-xl font-bold text-white">@userWithRole.User.FullName</h3>
                            <p class="text-gray-400 text-sm">@userWithRole.User.Email</p>
                            <div class="flex items-center space-x-2 mt-1">
                                <span class="px-2 py-1 @(userWithRole.User.IsActive ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400") rounded-full text-xs font-medium">
                                    @(userWithRole.User.IsActive ? "Active" : "Inactive")
                                </span>
                                <span class="px-2 py-1 bg-blue-500/20 text-blue-400 rounded-full text-xs font-medium">
                                    Organizer
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="space-y-3 mb-4">
                        <div class="flex items-center space-x-2 text-sm">
                            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                            <span class="text-gray-300">@userWithRole.User.OrganizationName</span>
                        </div>
                        <div class="flex items-center space-x-2 text-sm">
                            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-gray-300">Events</span>
                        </div>
                        <div class="flex items-center space-x-2 text-sm">
                            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                            <span class="text-gray-300">Revenue</span>
                        </div>
                    </div>

                    <div class="flex space-x-2">
                        <button onclick="viewOrganizer('@userWithRole.User.Id')" class="flex-1 px-4 py-2 bg-blue-500/20 border border-blue-500/30 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all duration-200 font-medium text-sm">
                            View
                        </button>
                        <button onclick="openEditOrganizerModal('@userWithRole.User.Id')" class="flex-1 px-4 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 font-medium text-sm">
                            Edit
                        </button>
                        <button onclick="toggleOrganizerStatus('@userWithRole.User.Id', '@userWithRole.User.IsActive')" 
                                class="px-4 py-2 @(@userWithRole.User.IsActive ? "bg-red-500/20 border-red-500/30 text-red-400 hover:bg-red-500/30" : "bg-green-500/20 border-green-500/30 text-green-400 hover:bg-green-500/30") border rounded-lg transition-all duration-200 font-medium text-sm">
                            @(@userWithRole.User.IsActive ? "Deactivate" : "Activate")
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (ViewBag.TotalPages > 1)
        {
            <div class="flex items-center justify-between">
                <div class="text-gray-400 text-sm">
                    Showing @ViewBag.StartItem-@ViewBag.EndItem of @ViewBag.TotalItems organizers
                </div>
                <div class="flex space-x-2">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a href="@Url.Action("Organizers", new { page = ViewBag.CurrentPage - 1 })" 
                           class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                            Previous
                        </a>
                    }
                    else
                    {
                        <span class="px-3 py-2 bg-white/5 border border-white/10 text-gray-500 rounded-lg text-sm cursor-not-allowed">
                            Previous
                        </span>
                    }

                    @{
                        int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                        int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == ViewBag.CurrentPage)
                        {
                            <span class="px-3 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-lg text-sm">@i</span>
                        }
                        else
                        {
                            <a href="@Url.Action("Organizers", new { page = i })" 
                               class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">@i</a>
                        }
                    }

                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a href="@Url.Action("Organizers", new { page = ViewBag.CurrentPage + 1 })" 
                           class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                            Next
                        </a>
                    }
                    else
                    {
                        <span class="px-3 py-2 bg-white/5 border border-white/10 text-gray-500 rounded-lg text-sm cursor-not-allowed">
                            Next
                        </span>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Create Organizer Modal -->
<div id="createOrganizerModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-bold text-white">Create New Organizer</h3>
            <button onclick="closeCreateOrganizerModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <form asp-controller="Admin" asp-action="CreateOrganizer" method="post" class="space-y-6" id="createOrganizerForm">
            @Html.AntiForgeryToken()
            
            <!-- Validation Summary - will be populated by server-side validation -->
            <div id="validationSummary" class="text-red-400 text-sm mb-4 p-3 bg-red-500/10 border border-red-500/20 rounded-lg" style="display: none;"></div>
            
            <div>
                <label for="fullName" class="block text-sm font-medium text-gray-300 mb-2">Full Name</label>
                <input type="text" id="fullName" name="FullName" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="email" class="block text-sm font-medium text-gray-300 mb-2">Email Address</label>
                <input type="email" id="email" name="Email" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="nic" class="block text-sm font-medium text-gray-300 mb-2">NIC Number</label>
                <input type="text" id="nic" name="NIC"
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="phone" class="block text-sm font-medium text-gray-300 mb-2">Phone Number</label>
                <input type="tel" id="phone" name="ContactNumber" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="organization" class="block text-sm font-medium text-gray-300 mb-2">Organization Name</label>
                <input type="text" id="organization" name="OrganizationName"
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="address" class="block text-sm font-medium text-gray-300 mb-2">Address</label>
                <textarea id="address" name="Address" rows="3"
                          class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"></textarea>
            </div>


            <div class="flex justify-end space-x-4">
                <button type="button" onclick="closeCreateOrganizerModal()" class="px-6 py-3 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200 font-medium">
                    Cancel
                </button>
                <button type="submit" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200">
                    Create Organizer
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Organizer Model -->

<div id="editOrganizerModalContainer">
</div>
<!-- Organizer Details Modal -->
<div id="viewOrganizerModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 id="viewModalTitle" class="text-xl font-bold text-white">Organizer Details</h3>
            <button onclick="closeViewOrganizerModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div id="organizerDetails" class="space-y-4">
        </div>
    </div>
</div>

<script>
    function openEditOrganizerModal(userId) {
        fetch(`/Admin/LoadEditOrganizerModal?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Could not load modal content.');
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('editOrganizerModalContainer').innerHTML = html;
                document.getElementById('editOrganizerModal').classList.remove('hidden');
                
                // Add form submission handler
                const editForm = document.getElementById('editOrganizerForm');
                if (editForm) {
                    editForm.addEventListener('submit', handleEditFormSubmit);
                }
            })
            .catch(error => {
                console.error('Error loading edit modal:', error);
                alert('An error occurred while trying to load the edit form.');
            });
    }

    function handleEditFormSubmit(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            } else {
                return response.text().then(html => {
                    // If it's HTML (validation errors), update the modal content
                    document.getElementById('editOrganizerModalContainer').innerHTML = html;
                    const newForm = document.getElementById('editOrganizerForm');
                    if (newForm) {
                        newForm.addEventListener('submit', handleEditFormSubmit);
                    }
                    return null;
                });
            }
        })
        .then(data => {
            if (data && data.success) {
                // Show success message
                showSuccessMessage(data.message);
                closeEditOrganizerModal();
                // Reload the page to show updated data
                location.reload();
            }
        })
        .catch(error => {
            console.error('Error updating organizer:', error);
            alert('An error occurred while updating the organizer.');
        });
    }

    function closeEditOrganizerModal() {
        document.getElementById('editOrganizerModal').classList.add('hidden');

        document.getElementById('editOrganizerModalContainer').innerHTML = '';
    }

    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        sidebar.classList.toggle('-translate-x-full');
        overlay.classList.toggle('hidden');
        
        if (!sidebar.classList.contains('-translate-x-full')) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
    }
    
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const sidebar = document.getElementById('sidebar');
            if (!sidebar.classList.contains('-translate-x-full')) {
                toggleSidebar();
            }
        }
    });
    
    window.addEventListener('resize', function() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        if (window.innerWidth >= 768) {
            sidebar.classList.remove('-translate-x-full');
            overlay.classList.add('hidden');
            document.body.style.overflow = '';
        }
    });

    function filterOrganizers(filter) {
        const organizerCards = document.querySelectorAll('.organizer-card');
        const filterButtons = document.querySelectorAll('.organizer-filter');

        filterButtons.forEach(btn => {
            btn.classList.remove('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');
            btn.classList.add('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        });

        event.target.classList.remove('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        event.target.classList.add('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');

        organizerCards.forEach(card => {
            const status = card.getAttribute('data-status');
            
            let show = false;
            switch(filter) {
                case 'all':
                    show = true;
                    break;
                case 'active':
                    show = status === 'active';
                    break;
                case 'inactive':
                    show = status === 'inactive';
                    break;
            }
            
            card.style.display = show ? 'block' : 'none';
        });
    }

    document.getElementById('organizerSearch').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const organizerCards = document.querySelectorAll('.organizer-card');

        organizerCards.forEach(card => {
            const name = card.querySelector('h3').textContent.toLowerCase();
            const email = card.querySelector('p').textContent.toLowerCase();
            
            if (name.includes(searchTerm) || email.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    });

    function openCreateOrganizerModal() {
        document.getElementById('createOrganizerModal').classList.remove('hidden');
        
        // Add form submission handler
        const createForm = document.getElementById('createOrganizerForm');
        if (createForm) {
            createForm.addEventListener('submit', handleCreateFormSubmit);
        }
        
        // Clear any existing validation errors
        clearValidationErrors();
    }

    function handleCreateFormSubmit(event) {
        // Let the form submit normally for server-side validation
        // The server will handle validation and return appropriate response
    }

    function clearValidationErrors() {
        const validationSummary = document.getElementById('validationSummary');
        if (validationSummary) {
            validationSummary.style.display = 'none';
            validationSummary.innerHTML = '';
        }
    }

    function closeCreateOrganizerModal() {
        document.getElementById('createOrganizerModal').classList.add('hidden');
        
        // Clear the form
        const createForm = document.getElementById('createOrganizerForm');
        if (createForm) {
            createForm.reset();
        }
        
        // Clear validation errors
        clearValidationErrors();
    }

    function showSuccessMessage(message) {
        // Create a temporary success message element
        const successDiv = document.createElement('div');
        successDiv.className = 'fixed top-4 right-4 z-50 p-4 bg-green-500/20 border border-green-500/30 rounded-xl text-green-400';
        successDiv.innerHTML = `
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                ${message}
            </div>
        `;
        
        document.body.appendChild(successDiv);
        
        // Remove after 5 seconds
        setTimeout(() => {
            if (successDiv.parentNode) {
                successDiv.parentNode.removeChild(successDiv);
            }
        }, 5000);
    }

        function viewOrganizer(userId) {
        fetch(`/Admin/GetOrganizerData?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Organizer not found');
                }
                return response.json();
            })
            .then(data => {
                const organizerDetailsDiv = document.getElementById('organizerDetails');
                organizerDetailsDiv.innerHTML = `
                    <div class="flex items-center space-x-4 mb-4">
                        <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-bold text-xl">${data.userName.substring(0, 2).toUpperCase()}</span>
                        </div>
                        <div>
                            <h4 class="text-xl font-semibold text-white">${data.fullName}</h4>
                            <p class="text-gray-400">${data.email}</p>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Status</p>
                            <p class="text-white font-medium">${data.isActive ? 'Active' : 'Inactive'}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Organization</p>
                            <p class="text-white font-medium">${data.organizationName || 'N/A'}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Phone</p>
                            <p class="text-white font-medium">${data.contactNumber}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Address</p>
                            <p class="text-white font-medium">${data.address || 'N/A'}</p>
                        </div>
                        </div>
                `;
                document.getElementById('viewOrganizerModal').classList.remove('hidden');
            })
            .catch(error => {
                console.error('Error fetching organizer data:', error);
                alert('Could not fetch organizer details.');
            });
    }

    function closeViewOrganizerModal() {
        document.getElementById('viewOrganizerModal').classList.add('hidden');
    }

    function editOrganizer(organizerId) {
        window.location.href = `/Admin/EditOrganizer/${organizerId}`;
    }

    function toggleOrganizerStatus(organizerId, currentStatus) {
        const action = currentStatus === 'True' ? 'deactivate' : 'activate';
        const actionText = currentStatus === 'True' ? 'Deactivate' : 'Activate';
        
        if (confirm(`Are you sure you want to ${action} this organizer?`)) {
            // Create a form and submit it
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("ToggleStatus", "Admin")';
            
            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token;
            form.appendChild(tokenInput);
            
            // Add organizer ID
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = organizerId;
            form.appendChild(idInput);
            
            // Submit the form
            document.body.appendChild(form);
            form.submit();
        }
    }


    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeCreateOrganizerModal();
            closeEditOrganizerModal();
        }
    });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
