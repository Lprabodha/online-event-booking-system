@using online_event_booking_system.Models.View_Models
@model IEnumerable<UserWithRoleViewModel>

@{
    ViewData["Title"] = "Organizers Management";
    Layout = "_DashboardLayout";
}

<!-- Organizers Management Page -->
<div class="min-h-screen bg-dark-navy text-white pt-20">
        <!-- Main Content -->
    <div class="p-4 md:p-6">

            <!-- Page Header -->
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8">
                <div>
                    <h1 class="text-3xl font-bold bg-gradient-to-r from-purple-400 to-teal-400 text-transparent bg-clip-text mb-2">Organizers Management</h1>
                    <p class="text-gray-400">Manage event organizers, create new organizers, and control access</p>
                </div>
                <button onclick="openCreateOrganizerModal()" class="mt-4 lg:mt-0 px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200 transform hover:scale-105">
                    <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Create Organizer
                </button>
            </div>

        <!-- Search and Filter Bar -->
        <div class="bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 mb-8">
            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Search -->
                <div class="flex-1">
                    <div class="relative">
                        <input type="text" id="organizerSearch" placeholder="Search organizers by name, email, or organization..." 
                               class="w-full px-4 py-3 pl-12 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                        <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                </div>
                
                <!-- Filter Buttons -->
                <div class="flex flex-wrap gap-2">
                    <button onclick="filterOrganizers('all')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 bg-gradient-to-r from-purple-500 to-teal-500 text-white text-sm">
                        All Organizers
                    </button>
                    <button onclick="filterOrganizers('active')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Active
                    </button>
                    <button onclick="filterOrganizers('inactive')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Inactive
                    </button>
                    <button onclick="filterOrganizers('verified')" class="organizer-filter px-4 py-2 rounded-lg font-medium transition-all duration-200 text-gray-300 hover:text-white hover:bg-white/10 text-sm">
                        Verified
                    </button>
                </div>
            </div>
        </div>

        <!-- Organizers Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-8">
            @foreach (var userWithRole in Model)
            {
                <div class="organizer-card bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl p-6 hover:bg-white/10 transition-all duration-300"
                     data-status="@(userWithRole.User.IsActive ? "active" : "inactive")"
                     data-verified="@(userWithRole.User.IsActive ? "true" : "false")">

                    <div class="flex items-center space-x-4 mb-4">
                        <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-bold text-xl">
                                @(userWithRole.User.UserName != null && userWithRole.User.UserName.Length >= 2 ? userWithRole.User.UserName.Substring(0, 2).ToUpper() : "N/A")
                            </span>
                        </div>
                        <div class="flex-1">
                            <h3 class="text-xl font-bold text-white">@userWithRole.User.FullName</h3>
                            <p class="text-gray-400 text-sm">@userWithRole.User.Email</p>
                            <div class="flex items-center space-x-2 mt-1">
                                <span class="px-2 py-1 @(userWithRole.User.IsActive ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400") rounded-full text-xs font-medium">
                                    @(userWithRole.User.IsActive ? "Active" : "Inactive")
                                </span>
                                <span class="px-2 py-1 @(userWithRole.User.IsActive ? "bg-blue-500/20 text-blue-400" : "bg-gray-500/20 text-gray-400") rounded-full text-xs font-medium">
                                    @(userWithRole.User.IsActive ? "Verified" : "Unverified")
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="space-y-3 mb-4">
                        <div class="flex items-center space-x-2 text-sm">
                            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                            <span class="text-gray-300">@userWithRole.User.OrganizationName</span>
                        </div>
                        <div class="flex items-center space-x-2 text-sm">
                            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-gray-300">Events</span>
                        </div>
                        <div class="flex items-center space-x-2 text-sm">
                            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                            <span class="text-gray-300">Revenue</span>
                        </div>
                    </div>

                    <div class="flex space-x-2">
                        <button onclick="viewOrganizer('@userWithRole.User.Id')" class="flex-1 px-4 py-2 bg-blue-500/20 border border-blue-500/30 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-all duration-200 font-medium text-sm">
                            View
                        </button>
                        <button onclick="openEditOrganizerModal('@userWithRole.User.Id')" class="flex-1 px-4 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 font-medium text-sm">
                            Edit
                        </button>
                        <form asp-controller="Admin" asp-action="ToggleStatus" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@userWithRole.User.Id" />
                            <button type="submit" class="px-4 py-2 bg-red-500/20 border border-red-500/30 text-red-400 rounded-lg hover:bg-red-500/30 transition-all duration-200 font-medium text-sm">
                                @(@userWithRole.User.IsActive ? "Deactivate" : "Activate")
                            </button>
                        </form>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="flex items-center justify-between">
            <div class="text-gray-400 text-sm">
                Showing 1-3 of 45 organizers
            </div>
            <div class="flex space-x-2">
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                    Previous
                </button>
                <button class="px-3 py-2 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-lg text-sm">1</button>
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">2</button>
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">3</button>
                <button class="px-3 py-2 bg-white/10 border border-white/20 text-white rounded-lg hover:bg-white/20 transition-all duration-200 text-sm">
                    Next
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create Organizer Modal -->
<div id="createOrganizerModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-bold text-white">Create New Organizer</h3>
            <button onclick="closeCreateOrganizerModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        
        <form asp-controller="Admin" asp-action="CreateOrganizer" method="post" class="space-y-6">
            @Html.AntiForgeryToken()
            <div>
                <label for="fullName" class="block text-sm font-medium text-gray-300 mb-2">Full Name</label>
                <input type="text" id="fullName" name="FullName" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="email" class="block text-sm font-medium text-gray-300 mb-2">Email Address</label>
                <input type="email" id="email" name="Email" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="nic" class="block text-sm font-medium text-gray-300 mb-2">NIC Number</label>
                <input type="text" id="nic" name="NIC" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="phone" class="block text-sm font-medium text-gray-300 mb-2">Phone Number</label>
                <input type="tel" id="phone" name="PhoneNumber" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="organization" class="block text-sm font-medium text-gray-300 mb-2">Organization Name</label>
                <input type="text" id="organization" name="OrganizationName" required
                       class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
            </div>

            <div>
                <label for="address" class="block text-sm font-medium text-gray-300 mb-2">Address</label>
                <textarea id="address" name="Address" rows="3" required
                          class="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"></textarea>
            </div>

            <div class="flex items-center space-x-3">
                <input type="checkbox" id="verified" name="IsVerified" value="true" class="w-4 h-4 text-purple-600 bg-white/10 border-white/20 rounded focus:ring-purple-500">
                <label for="verified" class="text-sm text-gray-300">Mark as verified organizer</label>
            </div>

            <div class="flex justify-end space-x-4">
                <button type="button" onclick="closeCreateOrganizerModal()" class="px-6 py-3 bg-white/10 border border-white/20 text-white rounded-xl hover:bg-white/20 transition-all duration-200 font-medium">
                    Cancel
                </button>
                <button type="submit" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-teal-500 text-white rounded-xl font-semibold hover:from-purple-600 hover:to-teal-600 transition-all duration-200">
                    Create Organizer
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Organizer Model -->

<div id="editOrganizerModalContainer">
</div>
<!-- Organizer Details Modal -->
<div id="viewOrganizerModal" class="fixed inset-0 bg-black/50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-navy border border-white/10 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
            <h3 id="viewModalTitle" class="text-xl font-bold text-white">Organizer Details</h3>
            <button onclick="closeViewOrganizerModal()" class="text-gray-400 hover:text-white">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div id="organizerDetails" class="space-y-4">
        </div>
    </div>
</div>

<script>
    // This function fetches the partial view with the populated form
    function openEditOrganizerModal(userId) {
        fetch(`/Admin/LoadEditOrganizerModal?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Could not load modal content.');
                }
                return response.text();
            })
            .then(html => {
                // Inject the fetched HTML into the container and show the modal
                document.getElementById('editOrganizerModalContainer').innerHTML = html;
                document.getElementById('editOrganizerModal').classList.remove('hidden');
            })
            .catch(error => {
                console.error('Error loading edit modal:', error);
                alert('An error occurred while trying to load the edit form.');
            });
    }

    // Function to close the modal
    function closeEditOrganizerModal() {
        document.getElementById('editOrganizerModal').classList.add('hidden');
        // Optionally clear the content to prevent stale data
        document.getElementById('editOrganizerModalContainer').innerHTML = '';
    }

    // Sidebar toggle functionality
    function toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        sidebar.classList.toggle('-translate-x-full');
        overlay.classList.toggle('hidden');
        
        if (!sidebar.classList.contains('-translate-x-full')) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
    }
    
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            const sidebar = document.getElementById('sidebar');
            if (!sidebar.classList.contains('-translate-x-full')) {
                toggleSidebar();
            }
        }
    });
    
    window.addEventListener('resize', function() {
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('mobile-overlay');
        
        if (window.innerWidth >= 768) {
            sidebar.classList.remove('-translate-x-full');
            overlay.classList.add('hidden');
            document.body.style.overflow = '';
        }
    });

    // Organizer filtering functionality
    function filterOrganizers(filter) {
        const organizerCards = document.querySelectorAll('.organizer-card');
        const filterButtons = document.querySelectorAll('.organizer-filter');

        // Update filter button styles
        filterButtons.forEach(btn => {
            btn.classList.remove('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');
            btn.classList.add('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        });

        // Highlight active filter
        event.target.classList.remove('text-gray-300', 'hover:text-white', 'hover:bg-white/10');
        event.target.classList.add('bg-gradient-to-r', 'from-purple-500', 'to-teal-500', 'text-white');

        // Filter organizers
        organizerCards.forEach(card => {
            const status = card.getAttribute('data-status');
            const verified = card.getAttribute('data-verified');
            
            let show = false;
            switch(filter) {
                case 'all':
                    show = true;
                    break;
                case 'active':
                    show = status === 'active';
                    break;
                case 'inactive':
                    show = status === 'inactive';
                    break;
                case 'verified':
                    show = verified === 'true';
                    break;
            }
            
            card.style.display = show ? 'block' : 'none';
        });
    }

    // Search functionality
    document.getElementById('organizerSearch').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const organizerCards = document.querySelectorAll('.organizer-card');

        organizerCards.forEach(card => {
            const name = card.querySelector('h3').textContent.toLowerCase();
            const email = card.querySelector('p').textContent.toLowerCase();
            
            if (name.includes(searchTerm) || email.includes(searchTerm)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    });

    // Modal functions
    function openCreateOrganizerModal() {
        document.getElementById('createOrganizerModal').classList.remove('hidden');
    }

    function closeCreateOrganizerModal() {
        document.getElementById('createOrganizerModal').classList.add('hidden');
    }

        function viewOrganizer(userId) {
        fetch(`/Admin/GetOrganizerData?id=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Organizer not found');
                }
                return response.json();
            })
            .then(data => {
                const organizerDetailsDiv = document.getElementById('organizerDetails');
                organizerDetailsDiv.innerHTML = `
                    <div class="flex items-center space-x-4 mb-4">
                        <div class="w-16 h-16 bg-gradient-to-r from-purple-500 to-teal-500 rounded-full flex items-center justify-center">
                            <span class="text-white font-bold text-xl">${data.userName.substring(0, 2).toUpperCase()}</span>
                        </div>
                        <div>
                            <h4 class="text-xl font-semibold text-white">${data.fullName}</h4>
                            <p class="text-gray-400">${data.email}</p>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Status</p>
                            <p class="text-white font-medium">${data.isActive ? 'Active' : 'Inactive'}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Organization</p>
                            <p class="text-white font-medium">${data.organizationName || 'N/A'}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Phone</p>
                            <p class="text-white font-medium">${data.contactNumber}</p>
                        </div>
                        <div class="bg-white/5 border border-white/10 p-4 rounded-lg">
                            <p class="text-sm text-gray-400">Address</p>
                            <p class="text-white font-medium">${data.address || 'N/A'}</p>
                        </div>
                        </div>
                `;
                document.getElementById('viewOrganizerModal').classList.remove('hidden');
            })
            .catch(error => {
                console.error('Error fetching organizer data:', error);
                alert('Could not fetch organizer details.');
            });
    }

    function closeViewOrganizerModal() {
        document.getElementById('viewOrganizerModal').classList.add('hidden');
    }

    function editOrganizer(organizerId) {
        // Redirect to edit page or open edit modal
        window.location.href = `/Admin/EditOrganizer/${organizerId}`;
    }

    function toggleOrganizerStatus(organizerId, currentStatus) {
        const action = currentStatus === 'active' ? 'deactivate' : 'activate';
        if (confirm(`Are you sure you want to ${action} this organizer?`)) {
            // Here you would make an API call to update the organizer status
            alert(`Organizer ${action}d successfully!`);
            location.reload();
        }
    }

    function verifyOrganizer(organizerId) {
        if (confirm('Are you sure you want to verify this organizer?')) {
            // Here you would make an API call to verify the organizer
            alert('Organizer verified successfully!');
            location.reload();
        }
    }

    // Close modals on escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeCreateOrganizerModal();
            closeOrganizerModal();
        }
    });
</script>
